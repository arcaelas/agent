{"config":{"lang":["en","es","de"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arcaelas Agent Documentation","text":"<p>Welcome to @arcaelas/agent - a production-ready TypeScript library for building sophisticated AI agents with multi-provider support, reactive contexts, and intelligent tool orchestration.</p>"},{"location":"#what-is-arcaelas-agent","title":"What is Arcaelas Agent?","text":"<p>@arcaelas/agent enables you to create AI agents that scale from simple chatbots to complex organizational workflows through:</p> <ul> <li>\ud83d\udd04 Multi-Provider Support - Automatic failover between OpenAI, Anthropic, Groq, and custom APIs</li> <li>\ud83c\udfd7\ufe0f Reactive Architecture - Hierarchical context inheritance with automatic state management</li> <li>\ud83d\udee0\ufe0f Tool Ecosystem - Built-in HTTP tools and seamless custom function integration</li> <li>\ud83d\udc8e Full TypeScript - Complete type safety with discriminated unions and generics</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>npm install @arcaelas/agent\n</code></pre>"},{"location":"#your-first-agent","title":"Your First Agent","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\nconst assistant = new Agent({\n  name: \"Personal_Assistant\",\n  description: \"Helpful assistant for daily tasks\",\n  providers: [\n    async (ctx) =&gt; {\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        }))\n      });\n    }\n  ]\n});\n\nconst [messages, success] = await assistant.call(\"What's the weather like today?\");\n</code></pre> <p>Continue with the full tutorial \u2192</p>"},{"location":"#core-architecture","title":"Core Architecture","text":""},{"location":"#agent","title":"Agent","text":"<p>Central orchestrator combining identity, behavior, tools, and AI providers.</p> <pre><code>const agent = new Agent({\n  name: \"Support_Agent\",\n  description: \"Customer support specialist\",\n  tools: [search_tool, database_tool],\n  rules: [professional_rule],\n  providers: [openai_provider]\n});\n</code></pre> <p>Learn more \u2192</p>"},{"location":"#context","title":"Context","text":"<p>Hierarchical state management with automatic inheritance.</p> <pre><code>const parent_context = new Context({\n  metadata: new Metadata().set(\"company\", \"Acme Corp\"),\n  rules: [new Rule(\"Maintain professional tone\")]\n});\n\nconst child_context = new Context({\n  context: parent_context,  // Inherits from parent\n  metadata: new Metadata().set(\"department\", \"Sales\")\n});\n</code></pre> <p>Learn more \u2192</p>"},{"location":"#tools","title":"Tools","text":"<p>Extensible functions for external integrations.</p> <pre><code>const weather_tool = new Tool(\"get_weather\", {\n  description: \"Get current weather for any city\",\n  parameters: {\n    city: \"City name\",\n    units: \"Temperature units (celsius/fahrenheit)\"\n  },\n  func: async ({ city, units }) =&gt; {\n    return `Weather in ${city}: Sunny, 24\u00b0C`;\n  }\n});\n</code></pre> <p>Learn more \u2192</p>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#guides","title":"\ud83d\udcda Guides","text":"<ul> <li>Getting Started - Complete tutorial</li> <li>Core Concepts - Architecture overview</li> <li>Providers - Multi-provider setup</li> <li>Best Practices - Production patterns</li> </ul>"},{"location":"#api-reference","title":"\ud83d\udd27 API Reference","text":"<ul> <li>Agent - Main orchestrator</li> <li>Context - State management</li> <li>Metadata - Key-value store</li> <li>Tool - Custom functions</li> <li>Rule - Behavioral guidelines</li> <li>Message - Conversation messages</li> <li>Providers - Provider functions</li> <li>Built-in Tools - RemoteTool &amp; TimeTool</li> </ul>"},{"location":"#examples","title":"\ud83d\udca1 Examples","text":"<ul> <li>Basic Agent - Simple chatbot</li> <li>Multi-Provider - Resilient setup</li> <li>Custom Tools - Creating tools</li> <li>Context Inheritance - Enterprise patterns</li> <li>Advanced Patterns - Complex scenarios</li> </ul>"},{"location":"#advanced","title":"\ud83c\udf93 Advanced","text":"<ul> <li>Architecture - Internal design</li> <li>Performance - Optimization</li> <li>Troubleshooting - Common issues</li> <li>Migration Guide - Version upgrades</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Node.js \u2265 16.0.0</li> <li>TypeScript \u2265 4.5.0 (optional)</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>GitHub Repository</li> <li>NPM Package</li> <li>Issue Tracker</li> <li>Discord Community</li> </ul> <p>Ready to build intelligent AI agents? Start with the Getting Started Guide \u2192</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#104-2025-07-17","title":"[1.0.4] - 2025-07-17","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Full integration of the agent\u2019s name and description into the system message.</li> </ul>"},{"location":"CHANGELOG/#improved","title":"Improved","text":"<ul> <li>Enhanced rule and limit handling during conversation flow.</li> <li>Optimized validation process for provider responses.</li> </ul>"},{"location":"CHANGELOG/#103-2025-07-17","title":"[1.0.3] - 2025-07-17","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Renamed the <code>Bot</code> class to <code>Agent</code> to ensure consistent terminology.</li> <li>Refactored related interfaces to adopt the \"Agent\" term.</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Updated usage examples and improved main method documentation.</li> </ul>"},{"location":"CHANGELOG/#102-2025-07-17","title":"[1.0.2] - 2025-07-17","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Extra integrity checks prior to publishing.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Minor type issues in core interfaces.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Publication workflow now auto-increments patch version.</li> </ul>"},{"location":"CHANGELOG/#101-2025-07-17","title":"[1.0.1] - 2025-07-17","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Downgraded package version to <code>1.0.1</code> to comply with semantic versioning.</li> <li>Simplified internal logic for error handling in tool calls.</li> </ul>"},{"location":"CHANGELOG/#improved_1","title":"Improved","text":"<ul> <li>Better compatibility with various OpenAI API versions.</li> </ul>"},{"location":"CHANGELOG/#205-reverted-to-101-2025-07-17","title":"[2.0.5] (reverted to 1.0.1) - 2025-07-17","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Updated package metadata and dependencies.</li> <li>Fixed version numbering to restore correct semantic structure.</li> </ul>"},{"location":"CHANGELOG/#improved_2","title":"Improved","text":"<ul> <li>Optimized project metadata structure.</li> </ul>"},{"location":"CHANGELOG/#100-2025-07-17","title":"[1.0.0] - 2025-07-17","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li><code>yarn.lock</code> file to ensure dependency consistency.</li> <li>Strict version control enforcement for cross-environment compatibility.</li> </ul>"},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Improved installation and usage instructions.</li> </ul>"},{"location":"CHANGELOG/#090-2025-07-17","title":"[0.9.0] - 2025-07-17","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Initial TypeScript compiler configuration with strict mode.</li> <li>Module aliasing for improved project structure.</li> <li>Optimized compilation options for maximum compatibility.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers different methods to install @arcaelas/agent in your project.</p>"},{"location":"installation/#package-managers","title":"Package Managers","text":""},{"location":"installation/#npm","title":"NPM","text":"<pre><code>npm install @arcaelas/agent\n</code></pre>"},{"location":"installation/#yarn","title":"Yarn","text":"<pre><code>yarn add @arcaelas/agent\n</code></pre>"},{"location":"installation/#pnpm","title":"PNPM","text":"<pre><code>pnpm add @arcaelas/agent\n</code></pre>"},{"location":"installation/#bun","title":"Bun","text":"<pre><code>bun add @arcaelas/agent\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>Ensure your environment meets these minimum requirements:</p> <ul> <li>Node.js \u2265 16.0.0</li> <li>TypeScript \u2265 4.5.0 (for TypeScript projects)</li> <li>Modern Browser (ES2020+ support for browser usage)</li> </ul>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":""},{"location":"installation/#api-keys","title":"API Keys","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># OpenAI (Primary provider)\nOPENAI_API_KEY=your_openai_api_key\n\n# Anthropic Claude (Optional backup)\nANTHROPIC_API_KEY=your_anthropic_api_key\n\n# Groq (Optional backup)\nGROQ_API_KEY=your_groq_api_key\n</code></pre>"},{"location":"installation/#typescript-configuration","title":"TypeScript Configuration","text":"<p>Ensure your <code>tsconfig.json</code> includes:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true\n  }\n}\n</code></pre>"},{"location":"installation/#browser-usage","title":"Browser Usage","text":""},{"location":"installation/#es-modules","title":"ES Modules","text":"<pre><code>&lt;script type=\"module\"&gt;\n  import { Agent, Tool } from 'https://cdn.skypack.dev/@arcaelas/agent';\n\n  // Your code here\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#umd-global","title":"UMD (Global)","text":"<pre><code>&lt;script src=\"https://unpkg.com/@arcaelas/agent/dist/index.umd.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const { Agent, Tool } = ArcaelasAgent;\n\n  // Your code here\n&lt;/script&gt;\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>Test your installation with this simple example:</p> <pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\n// Create a test agent\nconst agent = new Agent({\n  name: \"Test_Agent\",\n  description: \"Verification agent\",\n  providers: [\n    async (ctx) =&gt; {\n      const openai = new OpenAI({\n        baseURL: \"https://api.openai.com/v1\",\n        apiKey: process.env.OPENAI_API_KEY\n      });\n\n      return await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        }))\n      });\n    }\n  ]\n});\n\n// Test the agent\nconsole.log(\"Testing agent...\");\nconst [conversation, success] = await agent.call(\"Say hello\");\n\nif (success) {\n  console.log(\"\u2705 Installation successful!\");\n  console.log(\"Response:\", conversation[conversation.length - 1].content);\n} else {\n  console.log(\"\u274c Installation failed. Check your API key.\");\n}\n</code></pre> <p>Expected Output: <pre><code>Testing agent...\n\u2705 Installation successful!\nResponse: Hello! How can I assist you today?\n</code></pre></p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started Guide - Build your first agent</li> <li>Core Concepts - Understand the architecture</li> <li>Examples - See practical implementations</li> </ul>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#module-not-found","title":"Module Not Found","text":"<p>If you get \"Module not found\" errors:</p> <pre><code># Clear cache and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"installation/#typescript-errors","title":"TypeScript Errors","text":"<p>If TypeScript shows errors:</p> <ol> <li>Ensure TypeScript version \u2265 4.5.0</li> <li>Check <code>tsconfig.json</code> configuration</li> <li>Run <code>npm install --save-dev @types/node</code></li> </ol>"},{"location":"installation/#api-key-issues","title":"API Key Issues","text":"<p>If your agent fails to connect:</p> <ol> <li>Verify API key in <code>.env</code> file</li> <li>Check key format (should start with <code>sk-</code>)</li> <li>Ensure <code>.env</code> is loaded (use <code>dotenv</code> package)</li> </ol> <pre><code>import 'dotenv/config';  // Load environment variables\nimport { Agent } from '@arcaelas/agent';\n</code></pre>"},{"location":"installation/#support","title":"Support","text":"<p>Need help? Check these resources:</p> <ul> <li>GitHub Issues</li> <li>Discussions</li> <li>Discord Community</li> </ul>"},{"location":"advanced/architecture/","title":"Architecture","text":"<p>Internal design and system architecture of @arcaelas/agent.</p>"},{"location":"advanced/architecture/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Agent Layer                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Agent (Orchestrator)            \u2502   \u2502\n\u2502  \u2502  - name, description             \u2502   \u2502\n\u2502  \u2502  - providers (AI services)       \u2502   \u2502\n\u2502  \u2502  - call() method                 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502              \u2502                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Context Layer                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Context (State Management)      \u2502    \u2502\n\u2502  \u2502  - metadata (reactive KV store)  \u2502    \u2502\n\u2502  \u2502  - rules (behavior guidelines)   \u2502    \u2502\n\u2502  \u2502  - tools (executable functions)  \u2502    \u2502\n\u2502  \u2502  - messages (conversation)       \u2502    \u2502\n\u2502  \u2502  - contexts (parent inheritance) \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"advanced/architecture/#core-components","title":"Core Components","text":""},{"location":"advanced/architecture/#1-agent","title":"1. Agent","text":"<p>Responsibility: Orchestration and execution</p> <p>Key Methods: - <code>constructor(options)</code> - Initialize with configuration - <code>call(prompt)</code> - Execute conversation with providers and tools - <code>get/set metadata</code>, <code>rules</code>, <code>tools</code>, <code>messages</code> - Access context properties</p> <p>Execution Flow (<code>call</code> method): 1. Add user message to context 2. Loop through providers with failover 3. Call provider with current context 4. If response includes tool_calls, execute them in parallel 5. Add tool results to context and loop again 6. Return when completion has no tool_calls</p>"},{"location":"advanced/architecture/#2-context","title":"2. Context","text":"<p>Responsibility: Hierarchical state management with inheritance</p> <p>Key Features: - Parent context inheritance via <code>contexts</code> parameter - Automatic merging of metadata, rules, tools, messages - Tool deduplication by name (child overrides parent) - Reactive metadata updates through broker pattern</p> <p>Inheritance Rules: - Metadata: Child can override parent values (last wins) - Rules: Concatenated (parent rules + child rules) - Tools: Deduplicated by name (child tools replace parent) - Messages: Concatenated (parent messages + child messages)</p>"},{"location":"advanced/architecture/#3-metadata","title":"3. Metadata","text":"<p>Responsibility: Reactive key-value storage with broker pattern</p> <p>Architecture: <pre><code>Metadata {\n  _brokers: Metadata[]   // Parent metadatas\n  _storage: Map          // Local storage\n\n  get(key) {\n    // Check local first\n    // Then check brokers in order\n  }\n\n  set(key, value) {\n    // Always store locally\n    return this  // For chaining\n  }\n}\n</code></pre></p>"},{"location":"advanced/architecture/#4-tool","title":"4. Tool","text":"<p>Responsibility: Encapsulate executable functions</p> <p>Two Constructor Modes: 1. Simple: <code>new Tool(name, func)</code> - String input only 2. Advanced: <code>new Tool(name, options)</code> - Typed parameters</p> <p>Properties: - <code>name</code> - Unique identifier - <code>description</code> - What the tool does - <code>parameters</code> - Schema of expected parameters - <code>func</code> - Executable function</p>"},{"location":"advanced/architecture/#5-rule","title":"5. Rule","text":"<p>Responsibility: Define behavioral guidelines</p> <p>Types: - Static: <code>new Rule(content)</code> - Always applies - Conditional: <code>new Rule(content, { when })</code> - Applies when condition met</p>"},{"location":"advanced/architecture/#6-message","title":"6. Message","text":"<p>Responsibility: Represent conversation messages</p> <p>Types (discriminated union): - <code>UserMessage</code> - User input - <code>AssistantMessage</code> - AI response - <code>ToolMessage</code> - Tool result - <code>SystemMessage</code> - System instruction</p>"},{"location":"advanced/architecture/#7-provider","title":"7. Provider","text":"<p>Responsibility: Interface with AI services</p> <p>Signature: <pre><code>type Provider = (ctx: Context) =&gt; ChatCompletionResponse | Promise&lt;ChatCompletionResponse&gt;\n</code></pre></p> <p>Contract: - Input: Context with messages, tools, metadata - Output: ChatCompletionResponse (OpenAI-compatible format)</p>"},{"location":"advanced/architecture/#data-flow","title":"Data Flow","text":""},{"location":"advanced/architecture/#standard-conversation","title":"Standard Conversation","text":"<pre><code>User sends prompt\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Agent.call()     \u2502\n\u2502 - Add user msg   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Provider Loop    \u2502\u2500\u2500\u2510\n\u2502 - Random select  \u2502  \u2502 Failover\n\u2502 - Try provider   \u2502\u25c4\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502 Tool calls? \u2502\n  \u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n     \u2502No    \u2502Yes\n     \u2502      \u25bc\n     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502  \u2502 Execute tools  \u2502\n     \u2502  \u2502 in parallel    \u2502\n     \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502          \u2502\n     \u2502          \u25bc\n     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502  \u2502 Add tool       \u2502\n     \u2502  \u2502 results to ctx \u2502\n     \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502          \u2502\n     \u2502          \u2514\u2500\u2500\u2500\u2510\n     \u2502              \u2502\n     \u25bc              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Return messages    \u2502\n\u2502 and success flag   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"advanced/architecture/#provider-failover","title":"Provider Failover","text":"<pre><code>PROVIDERS = [P1, P2, P3]\nFALLBACK = []\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Random select from   \u2502\n\u2502 PROVIDERS or FALLBACK\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502 Success?\u2502\n      \u2514\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\n        \u2502Yes\u2502No\n        \u2502   \u2502\n        \u25bc   \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502Done\u2502 \u2502Move to FALLBACK &amp; retry\u2502\n    \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"advanced/architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"advanced/architecture/#1-broker-pattern-metadata","title":"1. Broker Pattern (Metadata)","text":"<p>Metadata uses broker pattern for hierarchical value resolution:</p> <pre><code>// Parent metadata\nconst parent = new Metadata().set('theme', 'light');\n\n// Child metadata with parent as broker\nconst child = new Metadata(parent).set('color', 'blue');\n\nchild.get('theme'); // 'light' (from broker)\nchild.get('color'); // 'blue' (local)\n</code></pre>"},{"location":"advanced/architecture/#2-virtual-properties-agent","title":"2. Virtual Properties (Agent)","text":"<p>Agent virtualizes Context properties for cleaner API:</p> <pre><code>class Agent {\n  private _context: Context;\n\n  get metadata() { return this._context.metadata; }\n  get rules() { return this._context.rules; }\n  // etc.\n}\n</code></pre>"},{"location":"advanced/architecture/#3-discriminated-unions-message","title":"3. Discriminated Unions (Message)","text":"<p>TypeScript discriminated unions for type-safe message handling:</p> <pre><code>type Message =\n  | { role: 'user'; content: string }\n  | { role: 'assistant'; content: string }\n  | { role: 'tool'; tool_id: string; content: string }\n  | { role: 'system'; content: string }\n</code></pre>"},{"location":"advanced/architecture/#4-promiseall-for-tools","title":"4. Promise.all for Tools","text":"<p>Parallel tool execution using Promise.all:</p> <pre><code>const tool_results = await Promise.all(\n  tool_calls.map(async (call) =&gt; {\n    const tool = tools.find(t =&gt; t.name === call.function.name);\n    return await tool.func(JSON.parse(call.function.arguments));\n  })\n);\n</code></pre>"},{"location":"advanced/architecture/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Context Creation: O(1) - Shallow copying</li> <li>Metadata Lookup: O(n) - Checks local then brokers</li> <li>Tool Deduplication: O(n) - Single pass with Map</li> <li>Message Concatenation: O(n) - Array concat</li> <li>Provider Failover: O(p) worst case - p = number of providers</li> </ul>"},{"location":"advanced/architecture/#scalability","title":"Scalability","text":"<p>Vertical Scaling: - Single agent instance per conversation - In-memory state management - Stateless providers</p> <p>Horizontal Scaling: - Multiple agent instances across processes - External state storage (database) if needed - Load balancing across provider instances</p>"},{"location":"advanced/architecture/#security-considerations","title":"Security Considerations","text":"<ol> <li>API Keys: Never hardcode, use environment variables</li> <li>Input Validation: Validate tool parameters</li> <li>Rate Limiting: Implement provider-level throttling</li> <li>Error Handling: Catch and sanitize error messages</li> <li>Logging: Avoid logging sensitive user data</li> </ol>"},{"location":"advanced/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Performance - Optimization techniques</li> <li>Troubleshooting - Common issues</li> <li>Migration Guide - Version upgrades</li> </ul> <p>\u2190 Back to Advanced</p>"},{"location":"advanced/migration/","title":"Migration Guide","text":"<p>Guide for upgrading between major versions.</p>"},{"location":"advanced/migration/#v3x-to-v4x","title":"v3.x to v4.x","text":""},{"location":"advanced/migration/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Context API - Simplified hierarchy</li> <li>Message Types - Now uses discriminated unions</li> <li>Tool Constructor - Supports overloads</li> </ol>"},{"location":"advanced/migration/#migration-steps","title":"Migration Steps","text":""},{"location":"advanced/migration/#1-update-context-creation","title":"1. Update Context Creation","text":"<p>Before (v3): <pre><code>const ctx = new Context();\nctx.setMetadata(\"key\", \"value\");\n</code></pre></p> <p>After (v4): <pre><code>const ctx = new Context({\n  metadata: new Metadata().set(\"key\", \"value\")\n});\n</code></pre></p>"},{"location":"advanced/migration/#2-update-message-creation","title":"2. Update Message Creation","text":"<p>Before (v3): <pre><code>const msg = { role: \"user\", content: \"Hello\" };\n</code></pre></p> <p>After (v4): <pre><code>const msg = new Message({ role: \"user\", content: \"Hello\" });\n</code></pre></p>"},{"location":"advanced/migration/#3-update-tool-creation","title":"3. Update Tool Creation","text":"<p>No changes required - v4 is backward compatible with v3 tools.</p>"},{"location":"advanced/migration/#version-history","title":"Version History","text":"<ul> <li>v4.x - Current, simplified API</li> <li>v3.x - Previous stable</li> <li>v2.x - Legacy (deprecated)</li> <li>v1.x - Original (deprecated)</li> </ul> <p>\u2190 Back to Advanced</p>"},{"location":"advanced/performance/","title":"Performance Optimization","text":"<p>Techniques to optimize @arcaelas/agent performance in production.</p>"},{"location":"advanced/performance/#key-optimizations","title":"Key Optimizations","text":""},{"location":"advanced/performance/#1-context-reuse","title":"1. Context Reuse","text":"<p>Reuse contexts instead of creating new ones:</p> <pre><code>// \u2705 Good: Reuse context\nconst shared_context = new Context({ metadata: base_metadata });\nconst agent1 = new Agent({ name: \"A1\", contexts: shared_context });\nconst agent2 = new Agent({ name: \"A2\", contexts: shared_context });\n\n// \u274c Bad: Recreate context\nconst agent1 = new Agent({ name: \"A1\", metadata: base_metadata });\nconst agent2 = new Agent({ name: \"A2\", metadata: base_metadata });\n</code></pre>"},{"location":"advanced/performance/#2-provider-caching","title":"2. Provider Caching","text":"<p>Cache provider responses when appropriate:</p> <pre><code>const cache = new Map();\n\nconst cached_provider: Provider = async (ctx) =&gt; {\n  const key = JSON.stringify(ctx.messages);\n  if (cache.has(key)) return cache.get(key);\n\n  const response = await openai.chat.completions.create({...});\n  cache.set(key, response);\n  return response;\n};\n</code></pre>"},{"location":"advanced/performance/#3-minimize-tool-count","title":"3. Minimize Tool Count","text":"<p>Only include necessary tools:</p> <pre><code>// \u2705 Good: Specific tools\ntools: [weather_tool, news_tool]\n\n// \u274c Bad: Too many tools\ntools: [tool1, tool2, tool3, ..., tool20]  // Slows provider calls\n</code></pre>"},{"location":"advanced/performance/#4-batch-operations","title":"4. Batch Operations","text":"<p>Process multiple requests in parallel:</p> <pre><code>const results = await Promise.all([\n  agent.call(\"Query 1\"),\n  agent.call(\"Query 2\"),\n  agent.call(\"Query 3\")\n]);\n</code></pre>"},{"location":"advanced/performance/#monitoring","title":"Monitoring","text":"<p>Track performance metrics:</p> <pre><code>const start = Date.now();\nconst [messages, success] = await agent.call(prompt);\nconsole.log(`Response time: ${Date.now() - start}ms`);\nconsole.log(`Message count: ${messages.length}`);\nconsole.log(`Tool executions: ${messages.filter(m =&gt; m.role === 'tool').length}`);\n</code></pre> <p>\u2190 Back to Advanced</p>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions.</p>"},{"location":"advanced/troubleshooting/#provider-failures","title":"Provider Failures","text":"<p>Problem: All providers fail</p> <p>Solutions: 1. Check API keys are valid 2. Verify network connectivity 3. Check rate limits 4. Review error logs</p> <pre><code>const [messages, success] = await agent.call(prompt);\nif (!success) {\n  console.error(\"All providers failed\");\n  console.log(\"Last messages:\", messages);\n}\n</code></pre>"},{"location":"advanced/troubleshooting/#tool-execution-errors","title":"Tool Execution Errors","text":"<p>Problem: Tools throwing errors</p> <p>Solutions: 1. Validate tool parameters 2. Add try-catch in tool functions 3. Return error messages as strings</p> <pre><code>const robust_tool = new Tool('my_tool', {\n  description: \"Tool with error handling\",\n  parameters: { input: \"Input value\" },\n  func: async ({ input }) =&gt; {\n    try {\n      return await process(input);\n    } catch (error) {\n      return JSON.stringify({ error: true, message: error.message });\n    }\n  }\n});\n</code></pre>"},{"location":"advanced/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Problem: High memory usage</p> <p>Solutions: 1. Limit message history 2. Clear old conversations 3. Use external storage</p> <pre><code>// Limit message history\nif (agent.messages.length &gt; 100) {\n  agent.messages = agent.messages.slice(-50);  // Keep last 50\n}\n</code></pre>"},{"location":"advanced/troubleshooting/#slow-responses","title":"Slow Responses","text":"<p>Problem: Agent responses are slow</p> <p>Solutions: 1. Use faster models (gpt-3.5-turbo vs gpt-4) 2. Reduce tool count 3. Implement timeouts 4. Use streaming responses</p> <p>\u2190 Back to Advanced</p>"},{"location":"api/agent/","title":"Agent API Reference","text":"<p>The <code>Agent</code> class is the central orchestrator that coordinates AI providers, tools, rules, and conversation management.</p>"},{"location":"api/agent/#constructor","title":"Constructor","text":"<pre><code>new Agent(options: AgentOptions)\n</code></pre> <p>Creates a new Agent instance with the specified configuration.</p>"},{"location":"api/agent/#agentoptions","title":"AgentOptions","text":"Property Type Required Description <code>name</code> <code>string</code> \u2705 Yes Unique identifier for the agent <code>description</code> <code>string</code> \u2705 Yes Behavioral personality and purpose <code>metadata</code> <code>Metadata \\| Metadata[]</code> No Initial metadata <code>tools</code> <code>Tool \\| Tool[]</code> No Available tools <code>rules</code> <code>Rule \\| Rule[]</code> No Behavioral rules <code>messages</code> <code>Message \\| Message[]</code> No Conversation history <code>contexts</code> <code>Context \\| Context[]</code> No Parent contexts for inheritance <code>providers</code> <code>Provider[]</code> No AI model provider functions"},{"location":"api/agent/#example","title":"Example","text":"<pre><code>import { Agent, Tool, Rule } from '@arcaelas/agent';\n\nconst agent = new Agent({\n  name: \"Support_Agent\",\n  description: \"Professional customer support specialist\",\n  metadata: new Metadata().set(\"version\", \"1.0\"),\n  tools: [search_tool, ticket_tool],\n  rules: [new Rule(\"Be professional and courteous\")],\n  providers: [openai_provider, claude_provider]\n});\n</code></pre>"},{"location":"api/agent/#properties","title":"Properties","text":""},{"location":"api/agent/#name-readonly","title":"<code>name</code> (readonly)","text":"<pre><code>readonly name: string\n</code></pre> <p>Unique identifier for the agent.</p> <pre><code>console.log(agent.name);  // \"Support_Agent\"\n</code></pre>"},{"location":"api/agent/#description-readonly","title":"<code>description</code> (readonly)","text":"<pre><code>readonly description: string\n</code></pre> <p>Immutable description defining agent's personality and behavior.</p> <pre><code>console.log(agent.description);  // \"Professional customer support specialist\"\n</code></pre>"},{"location":"api/agent/#metadata","title":"<code>metadata</code>","text":"<pre><code>get metadata(): Metadata\n</code></pre> <p>Reactive metadata with inheritance from parent contexts.</p> <pre><code>agent.metadata.set(\"user_id\", \"12345\");\nconsole.log(agent.metadata.get(\"user_id\"));  // \"12345\"\n</code></pre> <p>Learn more about Metadata \u2192</p>"},{"location":"api/agent/#tools","title":"<code>tools</code>","text":"<pre><code>get tools(): Tool[]\nset tools(tools: Tool[])\n</code></pre> <p>Available tools with automatic deduplication by name. Child tools override parent tools.</p> <pre><code>// Get all tools (inherited + local)\nconsole.log(agent.tools.length);\n\n// Set local tools\nagent.tools = [new_tool_1, new_tool_2];\n</code></pre> <p>Learn more about Tools \u2192</p>"},{"location":"api/agent/#rules","title":"<code>rules</code>","text":"<pre><code>get rules(): Rule[]\nset rules(rules: Rule[])\n</code></pre> <p>Behavioral rules combined from parent contexts and local rules.</p> <pre><code>// Get all rules\nconsole.log(agent.rules.length);\n\n// Set local rules\nagent.rules = [\n  new Rule(\"Maintain professional tone\"),\n  new Rule(\"Never share confidential info\")\n];\n</code></pre> <p>Learn more about Rules \u2192</p>"},{"location":"api/agent/#messages","title":"<code>messages</code>","text":"<pre><code>get messages(): Message[]\nset messages(messages: Message[])\n</code></pre> <p>Full conversation history with inheritance from parent contexts.</p> <pre><code>// Get all messages\nconsole.log(agent.messages.length);\n\n// Reset conversation\nagent.messages = [];\n</code></pre> <p>Learn more about Messages \u2192</p>"},{"location":"api/agent/#providers","title":"<code>providers</code>","text":"<pre><code>get providers(): Provider[]\n</code></pre> <p>Configured AI provider functions.</p> <pre><code>console.log(agent.providers.length);  // Number of providers\n</code></pre> <p>Learn more about Providers \u2192</p>"},{"location":"api/agent/#methods","title":"Methods","text":""},{"location":"api/agent/#call","title":"<code>call()</code>","text":"<pre><code>async call(prompt: string): Promise&lt;[Message[], boolean]&gt;\n</code></pre> <p>Processes user input with automatic tool execution and provider failover.</p> <p>Parameters:</p> <ul> <li><code>prompt</code> - User message to process</li> </ul> <p>Returns:</p> <p>Tuple of <code>[messages, success]</code>: - <code>messages</code> - Complete conversation history - <code>success</code> - Whether processing succeeded</p> <p>Example:</p> <pre><code>const [messages, success] = await agent.call(\"What's the weather?\");\n\nif (success) {\n  const response = messages[messages.length - 1].content;\n  console.log(\"Agent:\", response);\n} else {\n  console.log(\"Agent failed to respond\");\n}\n</code></pre> <p>Behavior:</p> <ol> <li>Adds user message to context immediately</li> <li>Tries providers in order until one succeeds</li> <li>If response includes tool calls, executes them</li> <li>Repeats until completion or all providers fail</li> <li>Returns final state and success indicator</li> </ol>"},{"location":"api/agent/#complete-examples","title":"Complete Examples","text":""},{"location":"api/agent/#basic-usage","title":"Basic Usage","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\nconst agent = new Agent({\n  name: \"Simple_Agent\",\n  description: \"Basic conversational agent\",\n  providers: [\n    async (ctx) =&gt; {\n      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({ role: m.role, content: m.content }))\n      });\n    }\n  ]\n});\n\nconst [messages, success] = await agent.call(\"Hello!\");\n</code></pre>"},{"location":"api/agent/#with-tools","title":"With Tools","text":"<pre><code>import { Agent, Tool } from '@arcaelas/agent';\n\nconst weather_tool = new Tool(\"get_weather\", {\n  description: \"Get current weather\",\n  parameters: { city: \"City name\" },\n  func: async (params) =&gt; `Weather in ${params.city}: Sunny`\n});\n\nconst agent = new Agent({\n  name: \"Weather_Agent\",\n  description: \"Agent with weather capabilities\",\n  tools: [weather_tool],\n  providers: [\n    async (ctx) =&gt; {\n      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({ role: m.role, content: m.content })),\n        tools: ctx.tools?.map(tool =&gt; ({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: { type: \"object\", properties: tool.parameters }\n          }\n        }))\n      });\n    }\n  ]\n});\n\nawait agent.call(\"What's the weather in London?\");\n</code></pre>"},{"location":"api/agent/#multi-provider-resilience","title":"Multi-Provider Resilience","text":"<pre><code>const agent = new Agent({\n  name: \"Resilient_Agent\",\n  description: \"High-availability agent\",\n  providers: [\n    // Primary: OpenAI\n    async (ctx) =&gt; {\n      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({ role: m.role, content: m.content }))\n      });\n    },\n\n    // Backup: Claude\n    async (ctx) =&gt; {\n      const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });\n      const response = await anthropic.messages.create({\n        model: \"claude-3-sonnet-20240229\",\n        max_tokens: 4000,\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role === \"system\" ? \"user\" : m.role,\n          content: m.content\n        }))\n      });\n\n      // Convert to OpenAI format\n      return {\n        id: response.id,\n        object: \"chat.completion\",\n        created: Math.floor(Date.now() / 1000),\n        model: \"claude-3-sonnet\",\n        choices: [{\n          index: 0,\n          message: { role: \"assistant\", content: response.content[0].text },\n          finish_reason: \"stop\"\n        }]\n      };\n    }\n  ]\n});\n\n// If OpenAI fails, automatically tries Claude\nconst [messages, success] = await agent.call(\"Hello\");\n</code></pre>"},{"location":"api/agent/#context-inheritance","title":"Context Inheritance","text":"<pre><code>import { Agent, Context, Metadata, Rule } from '@arcaelas/agent';\n\n// Company-wide context\nconst company_context = new Context({\n  metadata: new Metadata()\n    .set(\"organization\", \"Acme Corp\")\n    .set(\"compliance\", \"enterprise\"),\n  rules: [new Rule(\"Maintain professional communication\")]\n});\n\n// Specialized agent\nconst sales_agent = new Agent({\n  name: \"Sales_Agent\",\n  description: \"Sales specialist\",\n  contexts: company_context,  // Inherits company config\n  metadata: new Metadata().set(\"department\", \"Sales\"),\n  tools: [crm_tool, quote_tool],\n  providers: [openai_provider]\n});\n\n// Agent has access to company and department config\nconsole.log(sales_agent.metadata.get(\"organization\"));  // \"Acme Corp\"\nconsole.log(sales_agent.metadata.get(\"department\"));    // \"Sales\"\n</code></pre>"},{"location":"api/agent/#type-definitions","title":"Type Definitions","text":""},{"location":"api/agent/#provider","title":"Provider","text":"<pre><code>type Provider = (ctx: Context) =&gt; ChatCompletionResponse | Promise&lt;ChatCompletionResponse&gt;\n</code></pre> <p>Function that receives context and returns a ChatCompletion response.</p>"},{"location":"api/agent/#chatcompletionresponse","title":"ChatCompletionResponse","text":"<pre><code>interface ChatCompletionResponse {\n  id: string;\n  object: \"chat.completion\";\n  created: number;\n  model: string;\n  choices: CompletionChoice[];\n  usage?: CompletionUsage;\n}\n</code></pre> <p>Standard OpenAI ChatCompletion response format.</p>"},{"location":"api/agent/#error-handling","title":"Error Handling","text":"<p>The <code>call()</code> method handles errors internally by trying failover providers. Check the <code>success</code> boolean to determine if the operation succeeded.</p> <pre><code>const [messages, success] = await agent.call(prompt);\n\nif (!success) {\n  console.error(\"All providers failed\");\n  // Implement retry logic or fallback behavior\n}\n</code></pre>"},{"location":"api/agent/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Tool Execution: Tools execute in parallel using <code>Promise.all()</code></li> <li>Provider Failover: Failed providers are removed from the active pool</li> <li>Message History: Consider trimming old messages for long conversations</li> </ul> <pre><code>// Trim conversation history\nif (agent.messages.length &gt; 100) {\n  const recent = agent.messages.slice(-50);\n  agent.messages = recent;\n}\n</code></pre>"},{"location":"api/agent/#see-also","title":"See Also","text":"<ul> <li>Context API</li> <li>Tool API</li> <li>Rule API</li> <li>Message API</li> <li>Providers API</li> <li>Getting Started Guide</li> <li>Core Concepts</li> </ul>"},{"location":"api/built-in-tools/","title":"Built-in Tools","text":"<p>@arcaelas/agent includes two production-ready tools: RemoteTool for HTTP requests and TimeTool for time/date operations.</p>"},{"location":"api/built-in-tools/#remotetool","title":"RemoteTool","text":"<p>RemoteTool wraps HTTP API calls as agent tools. Supports GET, POST, PUT, DELETE, and PATCH methods.</p>"},{"location":"api/built-in-tools/#constructor","title":"Constructor","text":"<pre><code>new RemoteTool(name: string, options: RemoteToolOptions)\n</code></pre>"},{"location":"api/built-in-tools/#remotetooloptions","title":"RemoteToolOptions","text":"<pre><code>interface RemoteToolOptions {\n  description: string;\n  parameters?: Record&lt;string, string&gt;;\n  http: {\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\";\n    headers: Record&lt;string, string&gt;;\n    url: string;\n  };\n}\n</code></pre>"},{"location":"api/built-in-tools/#examples","title":"Examples","text":"<p>GET Request:</p> <pre><code>import { RemoteTool } from '@arcaelas/agent';\n\nconst weather_api = new RemoteTool(\"get_weather\", {\n  description: \"Get current weather from external API\",\n  parameters: {\n    city: \"City name to query\",\n    units: \"Temperature units (celsius or fahrenheit)\"\n  },\n  http: {\n    method: \"GET\",\n    headers: {\n      \"X-API-Key\": process.env.WEATHER_API_KEY!,\n      \"Accept\": \"application/json\"\n    },\n    url: \"https://api.weather.com/v1/current\"\n  }\n});\n</code></pre> <p>POST Request:</p> <pre><code>const create_ticket = new RemoteTool(\"create_support_ticket\", {\n  description: \"Create customer support ticket\",\n  parameters: {\n    subject: \"Ticket subject\",\n    description: \"Detailed description\",\n    priority: \"Priority level (low, medium, high)\"\n  },\n  http: {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.SUPPORT_API_TOKEN}`,\n      \"Content-Type\": \"application/json\"\n    },\n    url: \"https://support.example.com/api/tickets\"\n  }\n});\n</code></pre> <p>Usage in Agent:</p> <pre><code>const agent = new Agent({\n  name: \"Weather_Assistant\",\n  description: \"Provides weather information\",\n  tools: [weather_api],\n  providers: [openai_provider]\n});\n\nawait agent.call(\"What's the weather in Madrid?\");\n// Agent automatically calls weather_api tool with { city: \"Madrid\", units: \"celsius\" }\n</code></pre>"},{"location":"api/built-in-tools/#behavior-notes","title":"Behavior Notes","text":"<ul> <li>Parameters are sent as JSON in request body (for ALL methods including GET)</li> <li>Returns response as plain text</li> <li>Automatic error handling by agent</li> <li>Headers support dynamic values from environment variables</li> </ul>"},{"location":"api/built-in-tools/#timetool","title":"TimeTool","text":"<p>TimeTool provides current date and time with timezone support.</p>"},{"location":"api/built-in-tools/#constructor_1","title":"Constructor","text":"<pre><code>new TimeTool(options?: { time_zone?: string })\n</code></pre> <p>Options: - time_zone: Optional IANA timezone (e.g., \"Europe/Madrid\", \"America/New_York\", \"Asia/Tokyo\")</p>"},{"location":"api/built-in-tools/#examples_1","title":"Examples","text":"<p>System Timezone:</p> <pre><code>import { TimeTool } from '@arcaelas/agent';\n\nconst time_tool = new TimeTool({});\n\n// Returns current time in system timezone\n// Format: \"12/27/2024, 3:45:30 PM\"\n</code></pre> <p>Specific Timezone:</p> <pre><code>const tokyo_time = new TimeTool({\n  time_zone: \"Asia/Tokyo\"\n});\n\nconst madrid_time = new TimeTool({\n  time_zone: \"Europe/Madrid\"\n});\n\nconst utc_time = new TimeTool({\n  time_zone: \"UTC\"\n});\n</code></pre> <p>Usage in Agent:</p> <pre><code>const agent = new Agent({\n  name: \"Time_Assistant\",\n  description: \"Provides time information\",\n  tools: [\n    new TimeTool({ time_zone: \"Europe/Madrid\" })\n  ],\n  providers: [openai_provider]\n});\n\nawait agent.call(\"What time is it in Madrid?\");\n// Agent calls get_time tool, returns: \"12/27/2024, 2:45:30 PM\"\n</code></pre> <p>Multi-Timezone Agent:</p> <pre><code>const world_clock_agent = new Agent({\n  name: \"World_Clock\",\n  description: \"Provides time in multiple timezones\",\n  tools: [\n    new TimeTool({ time_zone: \"America/New_York\" }),\n    new TimeTool({ time_zone: \"Europe/London\" }),\n    new TimeTool({ time_zone: \"Asia/Tokyo\" })\n  ],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"api/built-in-tools/#output-format","title":"Output Format","text":"<p>All times are returned in <code>en-US</code> locale format regardless of timezone:</p> <pre><code>\"MM/DD/YYYY, HH:MM:SS AM/PM\"\n\nExamples:\n- \"12/27/2024, 3:45:30 PM\"\n- \"01/01/2025, 12:00:00 AM\"\n- \"06/15/2024, 11:23:45 PM\"\n</code></pre>"},{"location":"api/built-in-tools/#supported-timezones","title":"Supported Timezones","text":"<p>Uses IANA timezone database. Common timezones:</p> <ul> <li>Americas: <code>America/New_York</code>, <code>America/Los_Angeles</code>, <code>America/Chicago</code>, <code>America/Toronto</code>, <code>America/Sao_Paulo</code></li> <li>Europe: <code>Europe/London</code>, <code>Europe/Paris</code>, <code>Europe/Berlin</code>, <code>Europe/Madrid</code>, <code>Europe/Rome</code></li> <li>Asia: <code>Asia/Tokyo</code>, <code>Asia/Shanghai</code>, <code>Asia/Dubai</code>, <code>Asia/Kolkata</code>, <code>Asia/Singapore</code></li> <li>Pacific: <code>Pacific/Auckland</code>, <code>Australia/Sydney</code>, <code>Pacific/Honolulu</code></li> <li>Special: <code>UTC</code></li> </ul> <p>Full list of IANA timezones</p>"},{"location":"api/built-in-tools/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/built-in-tools/#pattern-api-integration","title":"Pattern: API Integration","text":"<pre><code>const github_api = new RemoteTool(\"search_github_repos\", {\n  description: \"Search GitHub repositories\",\n  parameters: {\n    query: \"Search query\",\n    language: \"Programming language filter\",\n    min_stars: \"Minimum number of stars\"\n  },\n  http: {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.GITHUB_TOKEN}`,\n      \"Accept\": \"application/vnd.github.v3+json\"\n    },\n    url: \"https://api.github.com/search/repositories\"\n  }\n});\n</code></pre>"},{"location":"api/built-in-tools/#pattern-multi-service-agent","title":"Pattern: Multi-Service Agent","text":"<pre><code>const multi_service_agent = new Agent({\n  name: \"Multi_Service_Assistant\",\n  description: \"Integrates multiple external services\",\n  tools: [\n    new RemoteTool(\"get_weather\", {...}),\n    new RemoteTool(\"search_news\", {...}),\n    new RemoteTool(\"create_task\", {...}),\n    new TimeTool({})\n  ],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"api/built-in-tools/#pattern-time-aware-agents","title":"Pattern: Time-Aware Agents","text":"<pre><code>const business_hours_agent = new Agent({\n  name: \"Business_Hours_Assistant\",\n  description: \"Provides time-aware responses\",\n  tools: [\n    new TimeTool({ time_zone: \"America/New_York\" })\n  ],\n  rules: [\n    new Rule(\"Inform about business hours\", {\n      when: async (agent) =&gt; {\n        // Agent can use time tool to check current time\n        const hour = new Date().getHours();\n        return hour &lt; 9 || hour &gt; 17;\n      }\n    })\n  ],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"api/built-in-tools/#best-practices","title":"Best Practices","text":""},{"location":"api/built-in-tools/#1-secure-api-keys","title":"1. Secure API Keys","text":"<pre><code>// \u2705 Good: Use environment variables\nconst secure_tool = new RemoteTool(\"api_call\", {\n  description: \"Make API call\",\n  http: {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${process.env.API_KEY}`\n    },\n    url: process.env.API_URL!\n  }\n});\n\n// \u274c Bad: Hardcode credentials\nconst insecure_tool = new RemoteTool(\"api_call\", {\n  description: \"Make API call\",\n  http: {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"Bearer sk-hardcoded-key-12345\"  // Never do this!\n    },\n    url: \"https://api.example.com\"\n  }\n});\n</code></pre>"},{"location":"api/built-in-tools/#2-clear-parameter-descriptions","title":"2. Clear Parameter Descriptions","text":"<pre><code>// \u2705 Good: Detailed parameter descriptions\nnew RemoteTool(\"search_products\", {\n  description: \"Search product catalog with filters\",\n  parameters: {\n    query: \"Product search query (e.g., 'red shoes', 'laptop')\",\n    category: \"Product category ID (optional, e.g., 'electronics')\",\n    max_price: \"Maximum price in USD (optional, e.g., '99.99')\"\n  },\n  http: {...}\n});\n\n// \u274c Bad: Vague descriptions\nnew RemoteTool(\"search_products\", {\n  description: \"Search\",\n  parameters: {\n    query: \"Query\",\n    category: \"Category\",\n    max_price: \"Price\"\n  },\n  http: {...}\n});\n</code></pre>"},{"location":"api/built-in-tools/#3-use-appropriate-http-methods","title":"3. Use Appropriate HTTP Methods","text":"<pre><code>// \u2705 Good: GET for queries\nnew RemoteTool(\"get_user\", {\n  description: \"Retrieve user information\",\n  http: { method: \"GET\", ... }\n});\n\n// \u2705 Good: POST for creation\nnew RemoteTool(\"create_user\", {\n  description: \"Create new user\",\n  http: { method: \"POST\", ... }\n});\n\n// \u2705 Good: PUT/PATCH for updates\nnew RemoteTool(\"update_user\", {\n  description: \"Update user information\",\n  http: { method: \"PATCH\", ... }\n});\n\n// \u2705 Good: DELETE for removal\nnew RemoteTool(\"delete_user\", {\n  description: \"Delete user account\",\n  http: { method: \"DELETE\", ... }\n});\n</code></pre>"},{"location":"api/built-in-tools/#type-safety","title":"Type Safety","text":"<p>Both tools are fully typed with TypeScript:</p> <pre><code>import { RemoteTool, TimeTool } from '@arcaelas/agent';\n\n// Type-safe RemoteTool\nconst api_tool: RemoteTool = new RemoteTool(\"api_call\", {\n  description: \"Call external API\",\n  http: {\n    method: \"POST\",  // \u2705 Type-checked: only valid HTTP methods\n    headers: { \"Content-Type\": \"application/json\" },\n    url: \"https://api.example.com\"\n  }\n});\n\n// Type-safe TimeTool\nconst time_tool: TimeTool = new TimeTool({\n  time_zone: \"Europe/Madrid\"  // \u2705 String type, validated at runtime\n});\n</code></pre>"},{"location":"api/built-in-tools/#related","title":"Related","text":"<ul> <li>Tool - Base Tool class</li> <li>Agent - Uses tools for capabilities</li> <li>Custom Tools Example - Creating custom tools</li> <li>API Integration - Advanced patterns</li> </ul> <p>Congratulations! You've completed the API Reference. Next, explore the Examples for practical implementations.</p>"},{"location":"api/context/","title":"Context","text":"<p>Context provides reactive state management with hierarchical inheritance for AI agents. It combines metadata, rules, tools, and messages with automatic propagation from parent contexts.</p>"},{"location":"api/context/#overview","title":"Overview","text":"<p>Context is a container class that manages configuration and state for agents through:</p> <ul> <li>Reactive Metadata: Key-value store with automatic inheritance</li> <li>Rules: Behavioral guidelines that cascade from parent to child</li> <li>Tools: Function collections with automatic deduplication</li> <li>Messages: Conversation history with complete lineage</li> </ul>"},{"location":"api/context/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Hierarchical inheritance (parent \u2192 child)</li> <li>\u2705 Automatic metadata propagation using broker pattern</li> <li>\u2705 Tool deduplication by name (child overrides parent)</li> <li>\u2705 Message history composition (parent + child)</li> <li>\u2705 Rule aggregation (combined, not replaced)</li> <li>\u2705 Type-safe with full TypeScript support</li> </ul>"},{"location":"api/context/#constructor","title":"Constructor","text":"<pre><code>new Context(options: ContextOptions)\n</code></pre>"},{"location":"api/context/#contextoptions","title":"ContextOptions","text":"<pre><code>interface ContextOptions {\n  /** Parent context(s) for hierarchical inheritance */\n  context?: Context | Context[];\n\n  /** Metadata instance(s) for configuration */\n  metadata?: Metadata | Metadata[];\n\n  /** Rule instance(s) for behavioral guidelines */\n  rules?: Rule | Rule[];\n\n  /** Tool instance(s) for available functions */\n  tools?: Tool | Tool[];\n\n  /** Message instance(s) for conversation history */\n  messages?: Message | Message[];\n}\n</code></pre> <p>All properties are optional, allowing you to create empty contexts or fully configured ones.</p>"},{"location":"api/context/#examples","title":"Examples","text":"<p>Empty Context:</p> <pre><code>import { Context } from '@arcaelas/agent';\n\nconst ctx = new Context({});\n</code></pre> <p>Basic Context:</p> <pre><code>import { Context, Metadata, Rule } from '@arcaelas/agent';\n\nconst ctx = new Context({\n  metadata: new Metadata().set(\"app\", \"MyApp\").set(\"version\", \"1.0\"),\n  rules: [new Rule(\"Maintain professional tone\")]\n});\n\nconsole.log(ctx.metadata.get(\"app\")); // \"MyApp\"\nconsole.log(ctx.rules.length);        // 1\n</code></pre> <p>Context with Inheritance:</p> <pre><code>const parent_ctx = new Context({\n  metadata: new Metadata().set(\"company\", \"Acme Corp\"),\n  rules: [new Rule(\"Be helpful and courteous\")]\n});\n\nconst child_ctx = new Context({\n  context: parent_ctx,  // Inherits everything from parent\n  metadata: new Metadata().set(\"department\", \"Sales\"),\n  rules: [new Rule(\"Focus on customer needs\")]\n});\n\nconsole.log(child_ctx.metadata.get(\"company\"));    // \"Acme Corp\" (inherited)\nconsole.log(child_ctx.metadata.get(\"department\")); // \"Sales\" (local)\nconsole.log(child_ctx.rules.length);                // 2 (parent + local)\n</code></pre> <p>Multiple Parent Contexts:</p> <pre><code>const auth_ctx = new Context({\n  metadata: new Metadata().set(\"auth_enabled\", true)\n});\n\nconst logging_ctx = new Context({\n  metadata: new Metadata().set(\"log_level\", \"info\")\n});\n\nconst app_ctx = new Context({\n  context: [auth_ctx, logging_ctx],  // Inherits from both\n  metadata: new Metadata().set(\"app_name\", \"Dashboard\")\n});\n\nconsole.log(app_ctx.metadata.get(\"auth_enabled\")); // true\nconsole.log(app_ctx.metadata.get(\"log_level\"));    // \"info\"\nconsole.log(app_ctx.metadata.get(\"app_name\"));     // \"Dashboard\"\n</code></pre>"},{"location":"api/context/#properties","title":"Properties","text":""},{"location":"api/context/#metadata","title":"metadata","text":"<pre><code>readonly metadata: Metadata\n</code></pre> <p>Reactive metadata store with automatic inheritance from parent contexts.</p> <p>Behavior: - Inherits all metadata from parent context(s) - Local metadata can override inherited values - Changes propagate using broker pattern</p> <p>Example:</p> <pre><code>const parent = new Context({\n  metadata: new Metadata()\n    .set(\"theme\", \"light\")\n    .set(\"lang\", \"en\")\n});\n\nconst child = new Context({\n  context: parent,\n  metadata: new Metadata().set(\"theme\", \"dark\")  // Override\n});\n\nconsole.log(child.metadata.get(\"theme\")); // \"dark\" (overridden)\nconsole.log(child.metadata.get(\"lang\"));  // \"en\" (inherited)\n</code></pre>"},{"location":"api/context/#rules","title":"rules","text":"<pre><code>get rules(): Rule[]\nset rules(rules: Rule[])\n</code></pre> <p>Combined rules from parent context(s) and local rules.</p> <p>Behavior: - Returns parent rules first, then local rules - Setter replaces only local rules (doesn't affect parent) - Rules aggregate (don't deduplicate)</p> <p>Example:</p> <pre><code>const global_ctx = new Context({\n  rules: [new Rule(\"Always be polite\")]\n});\n\nconst sales_ctx = new Context({\n  context: global_ctx,\n  rules: [new Rule(\"Focus on benefits\")]\n});\n\nconsole.log(sales_ctx.rules.length); // 2\n\n// Replace local rules only\nsales_ctx.rules = [\n  new Rule(\"Focus on ROI\"),\n  new Rule(\"Use customer testimonials\")\n];\n\nconsole.log(sales_ctx.rules.length); // 3 (1 parent + 2 new local)\n</code></pre>"},{"location":"api/context/#tools","title":"tools","text":"<pre><code>get tools(): Tool[]\nset tools(tools: Tool[])\n</code></pre> <p>Combined tools from parent context(s) and local tools with automatic deduplication by name.</p> <p>Behavior: - Local tools override parent tools with same name - Returns unique tools only (no duplicates) - Setter replaces only local tools</p> <p>Example:</p> <pre><code>import { Tool } from '@arcaelas/agent';\n\nconst base_ctx = new Context({\n  tools: [\n    new Tool(\"search\", async () =&gt; \"base search\"),\n    new Tool(\"analyze\", async () =&gt; \"base analyze\")\n  ]\n});\n\nconst enhanced_ctx = new Context({\n  context: base_ctx,\n  tools: [\n    new Tool(\"search\", async () =&gt; \"enhanced search\"),  // Overrides parent\n    new Tool(\"translate\", async () =&gt; \"translation\")     // New tool\n  ]\n});\n\nconst all_tools = enhanced_ctx.tools;\nconsole.log(all_tools.map(t =&gt; t.name)); // [\"analyze\", \"translate\", \"search\"]\n\n// \"search\" uses enhanced version, not base version\n</code></pre>"},{"location":"api/context/#messages","title":"messages","text":"<pre><code>get messages(): Message[]\nset messages(messages: Message[])\n</code></pre> <p>Combined message history from parent context(s) and local messages.</p> <p>Behavior: - Returns parent messages first, then local messages - Maintains chronological order (parent \u2192 child) - Setter replaces only local messages</p> <p>Example:</p> <pre><code>import { Message } from '@arcaelas/agent';\n\nconst parent_ctx = new Context({\n  messages: [\n    new Message({ role: \"system\", content: \"You are a helpful assistant\" })\n  ]\n});\n\nconst child_ctx = new Context({\n  context: parent_ctx,\n  messages: [\n    new Message({ role: \"user\", content: \"Hello!\" })\n  ]\n});\n\nconsole.log(child_ctx.messages.length); // 2\n\n// Add new message\nchild_ctx.messages.push(\n  new Message({ role: \"assistant\", content: \"Hi there!\" })\n);\n\nconsole.log(child_ctx.messages.length); // 3\n</code></pre>"},{"location":"api/context/#inheritance-rules","title":"Inheritance Rules","text":"<p>Understanding how properties are inherited:</p> Property Inheritance Behavior Override Behavior Deduplication metadata Merged (parent + child) Child overrides parent keys By key rules Concatenated (parent + child) No override, aggregates None tools Merged (parent + child) Child overrides by name By name messages Concatenated (parent + child) No override, aggregates None"},{"location":"api/context/#visualization","title":"Visualization","text":"<pre><code>const parent = new Context({\n  metadata: new Metadata().set(\"a\", 1).set(\"b\", 2),\n  rules: [new Rule(\"R1\")],\n  tools: [new Tool(\"T1\", async () =&gt; \"parent\")],\n  messages: [new Message({ role: \"system\", content: \"M1\" })]\n});\n\nconst child = new Context({\n  context: parent,\n  metadata: new Metadata().set(\"b\", 3).set(\"c\", 4),  // 'b' overrides\n  rules: [new Rule(\"R2\")],                             // Adds to R1\n  tools: [new Tool(\"T1\", async () =&gt; \"child\")],       // Replaces T1\n  messages: [new Message({ role: \"user\", content: \"M2\" })]  // Adds to M1\n});\n\n// Results:\n// metadata.all() = { a: 1, b: 3, c: 4 }\n// rules.length = 2 (R1, R2)\n// tools.length = 1 (T1 from child)\n// messages.length = 2 (M1, M2)\n</code></pre>"},{"location":"api/context/#common-patterns","title":"Common Patterns","text":""},{"location":"api/context/#pattern-configuration-layers","title":"Pattern: Configuration Layers","text":"<p>Create hierarchical configuration with global \u2192 department \u2192 team layers:</p> <pre><code>// Global company context\nconst company_ctx = new Context({\n  metadata: new Metadata()\n    .set(\"company\", \"Acme Corp\")\n    .set(\"compliance\", \"GDPR\"),\n  rules: [new Rule(\"Protect customer privacy\")]\n});\n\n// Department context\nconst sales_ctx = new Context({\n  context: company_ctx,\n  metadata: new Metadata().set(\"department\", \"Sales\"),\n  rules: [new Rule(\"Focus on customer value\")],\n  tools: [crm_tool, quote_tool]\n});\n\n// Team context\nconst team_a_ctx = new Context({\n  context: sales_ctx,\n  metadata: new Metadata().set(\"team\", \"Team A\").set(\"region\", \"EMEA\"),\n  rules: [new Rule(\"Respond in customer's timezone\")]\n});\n</code></pre>"},{"location":"api/context/#pattern-feature-flags","title":"Pattern: Feature Flags","text":"<p>Use metadata for feature toggles:</p> <pre><code>const base_ctx = new Context({\n  metadata: new Metadata()\n    .set(\"feature_analytics\", true)\n    .set(\"feature_experimental\", false)\n});\n\nconst beta_ctx = new Context({\n  context: base_ctx,\n  metadata: new Metadata().set(\"feature_experimental\", true)  // Enable for beta\n});\n\n// Check feature flags\nif (beta_ctx.metadata.get(\"feature_experimental\")) {\n  // Use experimental features\n}\n</code></pre>"},{"location":"api/context/#pattern-tool-composition","title":"Pattern: Tool Composition","text":"<p>Build specialized tool sets through inheritance:</p> <pre><code>const basic_tools_ctx = new Context({\n  tools: [time_tool, weather_tool]\n});\n\nconst advanced_tools_ctx = new Context({\n  context: basic_tools_ctx,\n  tools: [database_tool, api_tool]  // Adds to basic tools\n});\n\nconst specialized_ctx = new Context({\n  context: advanced_tools_ctx,\n  tools: [\n    new Tool(\"weather\", custom_weather_impl)  // Override weather\n  ]\n});\n</code></pre>"},{"location":"api/context/#pattern-conversation-templates","title":"Pattern: Conversation Templates","text":"<p>Reuse conversation starters:</p> <pre><code>const support_template = new Context({\n  messages: [\n    new Message({\n      role: \"system\",\n      content: \"You are a customer support specialist. Be helpful and empathetic.\"\n    }),\n    new Message({\n      role: \"assistant\",\n      content: \"Hello! How can I help you today?\"\n    })\n  ]\n});\n\n// Create new conversation from template\nconst customer_session = new Context({\n  context: support_template,\n  metadata: new Metadata()\n    .set(\"customer_id\", \"12345\")\n    .set(\"priority\", \"high\")\n});\n</code></pre>"},{"location":"api/context/#best-practices","title":"Best Practices","text":""},{"location":"api/context/#1-keep-contexts-focused","title":"1. Keep Contexts Focused","text":"<p>Each context should represent a single concern:</p> <pre><code>// \u2705 Good: Focused contexts\nconst auth_ctx = new Context({\n  metadata: new Metadata().set(\"auth_enabled\", true)\n});\n\nconst logging_ctx = new Context({\n  metadata: new Metadata().set(\"log_level\", \"info\")\n});\n\n// \u274c Bad: Too many concerns in one context\nconst everything_ctx = new Context({\n  metadata: new Metadata()\n    .set(\"auth_enabled\", true)\n    .set(\"log_level\", \"info\")\n    .set(\"theme\", \"dark\")\n    .set(\"cache_ttl\", 3600)\n    // ... many more unrelated settings\n});\n</code></pre>"},{"location":"api/context/#2-use-clear-naming","title":"2. Use Clear Naming","text":"<p>Name contexts based on their scope:</p> <pre><code>const global_ctx = new Context({ /* ... */ });\nconst company_ctx = new Context({ context: global_ctx });\nconst department_ctx = new Context({ context: company_ctx });\nconst team_ctx = new Context({ context: department_ctx });\nconst user_ctx = new Context({ context: team_ctx });\n</code></pre>"},{"location":"api/context/#3-minimize-context-depth","title":"3. Minimize Context Depth","text":"<p>Avoid deeply nested hierarchies (max 3-4 levels):</p> <pre><code>// \u2705 Good: Reasonable depth\napp \u2192 department \u2192 team\n\n// \u274c Bad: Too deep\nglobal \u2192 org \u2192 region \u2192 country \u2192 state \u2192 city \u2192 office \u2192 department \u2192 team\n</code></pre>"},{"location":"api/context/#4-document-override-behavior","title":"4. Document Override Behavior","text":"<p>When overriding tools or metadata, document why:</p> <pre><code>const custom_ctx = new Context({\n  context: base_ctx,\n  tools: [\n    // Override default search with custom implementation\n    // for better performance with our database\n    new Tool(\"search\", custom_search_implementation)\n  ]\n});\n</code></pre>"},{"location":"api/context/#type-safety","title":"Type Safety","text":"<p>Context is fully typed with TypeScript:</p> <pre><code>import { Context, ContextOptions, Metadata, Rule, Tool, Message } from '@arcaelas/agent';\n\n// All types are inferred\nconst ctx = new Context({\n  metadata: new Metadata(),  // Type: Metadata\n  rules: [new Rule(\"...\")],  // Type: Rule[]\n  tools: [new Tool(\"...\", async () =&gt; \"\")],  // Type: Tool[]\n  messages: [new Message({ role: \"user\", content: \"...\" })]  // Type: Message[]\n});\n\n// Property types are enforced\nconst metadata: Metadata = ctx.metadata;        // \u2705\nconst rules: Rule[] = ctx.rules;                // \u2705\nconst tools: Tool[] = ctx.tools;                // \u2705\nconst messages: Message[] = ctx.messages;       // \u2705\n</code></pre>"},{"location":"api/context/#related","title":"Related","text":"<ul> <li>Metadata - Key-value store used by Context</li> <li>Rule - Behavioral guidelines managed by Context</li> <li>Tool - Functions orchestrated by Context</li> <li>Message - Conversation history in Context</li> <li>Agent - Uses Context for configuration</li> <li>Context Inheritance Example - Practical patterns</li> </ul> <p>Next: Learn about Metadata \u2192</p>"},{"location":"api/message/","title":"Message","text":"<p>Message represents individual messages in a conversation between users, AI assistants, tools, and the system. It provides type-safe message handling with discriminated unions for different message roles.</p>"},{"location":"api/message/#overview","title":"Overview","text":"<p>Messages are the building blocks of conversations, categorized by role:</p> <ul> <li>user: Messages from the end user</li> <li>assistant: Responses from the AI agent</li> <li>tool: Results from tool executions</li> <li>system: System-level instructions and context</li> </ul>"},{"location":"api/message/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Type-safe role discrimination</li> <li>\u2705 Automatic timestamp tracking</li> <li>\u2705 Required <code>tool_id</code> for tool messages</li> <li>\u2705 JSON serialization support</li> <li>\u2705 Built-in validation</li> </ul>"},{"location":"api/message/#constructor","title":"Constructor","text":"<pre><code>new Message(options: MessageOptions)\n</code></pre> <p>Creates a new message with role-specific options.</p>"},{"location":"api/message/#messageoptions","title":"MessageOptions","text":"<pre><code>type MessageOptions =\n  | { role: \"user\"; content: string }\n  | { role: \"assistant\"; content: string }\n  | { role: \"system\"; content: string }\n  | { role: \"tool\"; content: string; tool_id: string };\n</code></pre> <p>TypeScript enforces that tool messages must include <code>tool_id</code>.</p>"},{"location":"api/message/#examples","title":"Examples","text":"<p>User Message:</p> <pre><code>import { Message } from '@arcaelas/agent';\n\nconst user_message = new Message({\n  role: \"user\",\n  content: \"What's the weather like today?\"\n});\n</code></pre> <p>Assistant Message:</p> <pre><code>const assistant_message = new Message({\n  role: \"assistant\",\n  content: \"It's sunny with a temperature of 24\u00b0C. Perfect weather for outdoor activities!\"\n});\n</code></pre> <p>Tool Message:</p> <pre><code>const tool_message = new Message({\n  role: \"tool\",\n  content: JSON.stringify({ temperature: 24, condition: \"sunny\" }),\n  tool_id: \"weather_query_12345\"\n});\n</code></pre> <p>System Message:</p> <pre><code>const system_message = new Message({\n  role: \"system\",\n  content: \"You are a helpful weather assistant. Provide accurate forecasts and suggestions.\"\n});\n</code></pre>"},{"location":"api/message/#properties","title":"Properties","text":""},{"location":"api/message/#role","title":"role","text":"<pre><code>readonly role: MessageRole\n</code></pre> <p>The message role indicating who sent the message.</p> <p>Type:</p> <pre><code>type MessageRole = \"user\" | \"assistant\" | \"tool\" | \"system\";\n</code></pre> <p>Example:</p> <pre><code>const message = new Message({ role: \"user\", content: \"Hello\" });\nconsole.log(message.role); // \"user\"\n</code></pre>"},{"location":"api/message/#content","title":"content","text":"<pre><code>readonly content: string\n</code></pre> <p>The textual content of the message.</p> <p>Example:</p> <pre><code>const message = new Message({\n  role: \"assistant\",\n  content: \"I'm here to help you today!\"\n});\n\nconsole.log(message.content); // \"I'm here to help you today!\"\n</code></pre>"},{"location":"api/message/#tool_id","title":"tool_id","text":"<pre><code>readonly tool_id: string | undefined\n</code></pre> <p>Unique identifier for tool messages. Only defined when <code>role === \"tool\"</code>.</p> <p>Example:</p> <pre><code>const tool_msg = new Message({\n  role: \"tool\",\n  content: \"Result data\",\n  tool_id: \"calculation_001\"\n});\n\nconsole.log(tool_msg.tool_id); // \"calculation_001\"\n\nconst user_msg = new Message({ role: \"user\", content: \"Hi\" });\nconsole.log(user_msg.tool_id); // undefined\n</code></pre>"},{"location":"api/message/#timestamp","title":"timestamp","text":"<pre><code>readonly timestamp: Date\n</code></pre> <p>Automatic timestamp when the message was created.</p> <p>Example:</p> <pre><code>const message = new Message({ role: \"user\", content: \"Hello\" });\nconsole.log(message.timestamp); // Date object\nconsole.log(message.timestamp.toISOString()); // \"2025-10-12T10:30:45.123Z\"\n</code></pre>"},{"location":"api/message/#length","title":"length","text":"<pre><code>get length(): number\n</code></pre> <p>Returns the character length of the message content.</p> <p>Example:</p> <pre><code>const message = new Message({ role: \"user\", content: \"Hello world\" });\nconsole.log(message.length); // 11\n</code></pre>"},{"location":"api/message/#methods","title":"Methods","text":""},{"location":"api/message/#tojson","title":"toJSON()","text":"<pre><code>toJSON(): {\n  role: MessageRole;\n  content: string;\n  tool_id?: string;\n  timestamp: string;\n}\n</code></pre> <p>Serializes the message to JSON format. The timestamp is converted to ISO 8601 string.</p> <p>Returns: Serializable representation</p> <p>Example:</p> <pre><code>const message = new Message({\n  role: \"assistant\",\n  content: \"Hello there!\"\n});\n\nconst json = JSON.stringify(message);\nconsole.log(json);\n// {\n//   \"role\": \"assistant\",\n//   \"content\": \"Hello there!\",\n//   \"timestamp\": \"2025-10-12T10:30:45.123Z\"\n// }\n\n// Tool message with tool_id\nconst tool_msg = new Message({\n  role: \"tool\",\n  content: \"Data\",\n  tool_id: \"calc_123\"\n});\n\nconsole.log(tool_msg.toJSON());\n// {\n//   role: \"tool\",\n//   content: \"Data\",\n//   tool_id: \"calc_123\",\n//   timestamp: \"...\"\n// }\n</code></pre>"},{"location":"api/message/#tostring","title":"toString()","text":"<pre><code>toString(): string\n</code></pre> <p>Returns human-readable string representation. Long content is truncated to 50 characters.</p> <p>Returns: String in format <code>\"Message(role) [tool_id]: content\"</code></p> <p>Example:</p> <pre><code>const message = new Message({\n  role: \"user\",\n  content: \"What's the weather?\"\n});\n\nconsole.log(message.toString());\n// \"Message(user): What's the weather?\"\n\nconst tool_msg = new Message({\n  role: \"tool\",\n  content: \"Result data here\",\n  tool_id: \"weather_001\"\n});\n\nconsole.log(tool_msg.toString());\n// \"Message(tool) [weather_001]: Result data here\"\n\nconst long_msg = new Message({\n  role: \"assistant\",\n  content: \"This is a very long message that will be truncated when displayed as a string representation\"\n});\n\nconsole.log(long_msg.toString());\n// \"Message(assistant): This is a very long message that will be trunca...\"\n</code></pre>"},{"location":"api/message/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/message/#pattern-conversation-building","title":"Pattern: Conversation Building","text":"<p>Build conversation history:</p> <pre><code>const conversation: Message[] = [\n  new Message({\n    role: \"system\",\n    content: \"You are a helpful customer service assistant\"\n  }),\n  new Message({\n    role: \"user\",\n    content: \"I need help with my order\"\n  }),\n  new Message({\n    role: \"assistant\",\n    content: \"I'd be happy to help! What's your order number?\"\n  }),\n  new Message({\n    role: \"user\",\n    content: \"Order #12345\"\n  })\n];\n\n// Add to agent\nagent.messages = conversation;\n</code></pre>"},{"location":"api/message/#pattern-tool-result-messages","title":"Pattern: Tool Result Messages","text":"<p>Handle tool execution results:</p> <pre><code>const user_query = new Message({\n  role: \"user\",\n  content: \"Search for customers named John\"\n});\n\n// ... agent calls search_customers tool ...\n\nconst tool_result = new Message({\n  role: \"tool\",\n  content: JSON.stringify([\n    { id: 1, name: \"John Smith\", email: \"john@example.com\" },\n    { id: 2, name: \"John Doe\", email: \"jdoe@example.com\" }\n  ]),\n  tool_id: \"search_customers_001\"\n});\n\nconst assistant_response = new Message({\n  role: \"assistant\",\n  content: \"I found 2 customers named John...\"\n});\n</code></pre>"},{"location":"api/message/#pattern-system-instructions","title":"Pattern: System Instructions","text":"<p>Set agent behavior with system messages:</p> <pre><code>const system_instructions = new Message({\n  role: \"system\",\n  content: `You are a sales assistant for an e-commerce platform.\nGuidelines:\n- Always be enthusiastic about products\n- Provide detailed product information\n- Suggest complementary items\n- Never discuss pricing discounts (that's for managers only)`\n});\n\nconst agent = new Agent({\n  name: \"Sales_Assistant\",\n  description: \"E-commerce sales specialist\",\n  messages: [system_instructions],\n  tools: [product_search, inventory_check]\n});\n</code></pre>"},{"location":"api/message/#pattern-message-filtering","title":"Pattern: Message Filtering","text":"<p>Filter messages by role:</p> <pre><code>// Get only user messages\nconst user_messages = conversation.filter(m =&gt; m.role === \"user\");\n\n// Get only assistant responses\nconst assistant_responses = conversation.filter(m =&gt; m.role === \"assistant\");\n\n// Get all tool results\nconst tool_results = conversation.filter(m =&gt; m.role === \"tool\");\n\n// Count messages by role\nconst message_counts = conversation.reduce((acc, msg) =&gt; {\n  acc[msg.role] = (acc[msg.role] || 0) + 1;\n  return acc;\n}, {} as Record&lt;MessageRole, number&gt;);\n\nconsole.log(message_counts);\n// { user: 3, assistant: 2, tool: 1, system: 1 }\n</code></pre>"},{"location":"api/message/#pattern-conversation-analysis","title":"Pattern: Conversation Analysis","text":"<p>Analyze conversation history:</p> <pre><code>function analyzeConversation(messages: Message[]) {\n  const total_length = messages.reduce((sum, msg) =&gt; sum + msg.length, 0);\n  const avg_length = total_length / messages.length;\n\n  const last_user_msg = messages\n    .filter(m =&gt; m.role === \"user\")\n    .pop();\n\n  const tool_calls = messages.filter(m =&gt; m.role === \"tool\").length;\n\n  return {\n    total_messages: messages.length,\n    average_length: avg_length,\n    last_user_message: last_user_msg?.content,\n    tool_executions: tool_calls,\n    duration: last_msg.timestamp.getTime() - first_msg.timestamp.getTime()\n  };\n}\n</code></pre>"},{"location":"api/message/#validation","title":"Validation","text":"<p>Messages are validated during construction:</p> <pre><code>// \u2705 Valid messages\nnew Message({ role: \"user\", content: \"Hello\" });\nnew Message({ role: \"tool\", content: \"Data\", tool_id: \"123\" });\n\n// \u274c Invalid - missing tool_id for tool message\ntry {\n  new Message({ role: \"tool\", content: \"Data\" } as any);\n} catch (error) {\n  console.error(error); // \"Los mensajes de herramienta requieren un tool_id\"\n}\n\n// \u274c Invalid - missing content\ntry {\n  new Message({ role: \"user\", content: \"\" } as any);\n} catch (error) {\n  console.error(error); // \"El contenido del mensaje es requerido\"\n}\n\n// \u274c Invalid - missing role\ntry {\n  new Message({ content: \"Hello\" } as any);\n} catch (error) {\n  console.error(error); // \"El rol del mensaje es requerido\"\n}\n</code></pre>"},{"location":"api/message/#best-practices","title":"Best Practices","text":""},{"location":"api/message/#1-use-appropriate-roles","title":"1. Use Appropriate Roles","text":"<p>Choose the correct role for each message:</p> <pre><code>// \u2705 Good: Correct role usage\nnew Message({ role: \"user\", content: \"User question\" });\nnew Message({ role: \"assistant\", content: \"AI response\" });\nnew Message({ role: \"system\", content: \"Behavior instructions\" });\nnew Message({ role: \"tool\", content: \"Tool output\", tool_id: \"tool_1\" });\n\n// \u274c Bad: Using wrong roles\nnew Message({ role: \"assistant\", content: \"This is from the user\" });  // Wrong\n</code></pre>"},{"location":"api/message/#2-include-tool-ids","title":"2. Include Tool IDs","text":"<p>Always provide tool_id for tool messages:</p> <pre><code>// \u2705 Good: Tool message with ID\nnew Message({\n  role: \"tool\",\n  content: JSON.stringify({ result: \"data\" }),\n  tool_id: \"search_customers_12345\"\n});\n\n// TypeScript prevents this at compile time:\n// new Message({ role: \"tool\", content: \"data\" });  // \u274c Type error\n</code></pre>"},{"location":"api/message/#3-structure-tool-content","title":"3. Structure Tool Content","text":"<p>Use JSON for structured tool results:</p> <pre><code>// \u2705 Good: Structured JSON content\nnew Message({\n  role: \"tool\",\n  content: JSON.stringify({\n    status: \"success\",\n    results: [{ id: 1, name: \"Item\" }],\n    count: 1\n  }),\n  tool_id: \"search_001\"\n});\n\n// \u274c Bad: Unstructured string\nnew Message({\n  role: \"tool\",\n  content: \"Found 1 item: Item\",\n  tool_id: \"search_001\"\n});\n</code></pre>"},{"location":"api/message/#4-preserve-message-order","title":"4. Preserve Message Order","text":"<p>Maintain chronological order:</p> <pre><code>// \u2705 Good: Chronological conversation\nconst conversation = [\n  system_message,       // First: setup\n  user_message_1,       // User starts\n  assistant_response_1, // AI responds\n  user_message_2,       // User continues\n  tool_result_1,        // Tool executed\n  assistant_response_2  // AI uses tool result\n];\n\n// \u274c Bad: Out of order\nconst bad_conversation = [\n  assistant_response,\n  user_message,         // Response before question\n  system_message        // Setup after conversation started\n];\n</code></pre>"},{"location":"api/message/#type-safety","title":"Type Safety","text":"<p>Message provides full TypeScript type safety:</p> <pre><code>import { Message, MessageOptions, MessageRole } from '@arcaelas/agent';\n\n// Type-safe message creation\nconst message: Message = new Message({\n  role: \"user\",\n  content: \"Hello\"\n});\n\n// Role is strictly typed\nconst role: MessageRole = message.role;  // \u2705 \"user\" | \"assistant\" | \"tool\" | \"system\"\n\n// Type checking enforces tool_id for tool messages\nconst tool_msg: Message = new Message({\n  role: \"tool\",\n  content: \"data\",\n  tool_id: \"required\"  // \u2705 TypeScript enforces this\n});\n\n// Discriminated union allows type narrowing\nfunction handleMessage(msg: Message) {\n  if (msg.role === \"tool\") {\n    console.log(msg.tool_id);  // \u2705 TypeScript knows tool_id exists here\n  }\n}\n</code></pre>"},{"location":"api/message/#related","title":"Related","text":"<ul> <li>Context - Manages message history</li> <li>Agent - Creates and processes messages</li> <li>Tool - Generates tool messages</li> <li>Core Concepts - Architecture overview</li> </ul> <p>Next: Learn about Providers \u2192</p>"},{"location":"api/metadata/","title":"Metadata","text":"<p>Metadata is a reactive key-value store with hierarchical inheritance using the broker pattern. It provides configuration management with automatic fallback and dynamic parent composition.</p>"},{"location":"api/metadata/#overview","title":"Overview","text":"<p>Metadata manages configuration data through:</p> <ul> <li>Hierarchical Inheritance: Multiple parent nodes with automatic fallback</li> <li>Broker Pattern: Dynamic parent management without proxies</li> <li>Local Overrides: Child values override parent values by key</li> <li>Deletion Markers: <code>null</code> values mark keys as deleted</li> <li>Fluent API: Method chaining for readable configuration</li> </ul>"},{"location":"api/metadata/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Multiple parent inheritance (broker pattern)</li> <li>\u2705 Automatic fallback chain (child \u2192 parent1 \u2192 parent2 \u2192 ...)</li> <li>\u2705 Local override capability</li> <li>\u2705 Dynamic parent addition with <code>use()</code></li> <li>\u2705 Type-safe with full TypeScript support</li> <li>\u2705 JSON serialization support</li> </ul>"},{"location":"api/metadata/#constructor","title":"Constructor","text":"<pre><code>new Metadata(...children: (Metadata | Metadata[])[])\n</code></pre> <p>Creates a new Metadata instance with optional parent nodes for inheritance.</p>"},{"location":"api/metadata/#parameters","title":"Parameters","text":"<ul> <li>children: Parent Metadata instance(s) - supports individual, array, or spread syntax</li> </ul>"},{"location":"api/metadata/#examples","title":"Examples","text":"<p>No Inheritance:</p> <pre><code>import { Metadata } from '@arcaelas/agent';\n\nconst metadata = new Metadata();\nmetadata.set(\"app\", \"MyApp\");\n</code></pre> <p>Single Parent:</p> <pre><code>const parent = new Metadata();\nparent.set(\"company\", \"Acme Corp\");\n\nconst child = new Metadata(parent);\nchild.set(\"department\", \"Sales\");\n\nconsole.log(child.get(\"company\"));    // \"Acme Corp\" (inherited)\nconsole.log(child.get(\"department\")); // \"Sales\" (local)\n</code></pre> <p>Multiple Parents:</p> <pre><code>const defaults = new Metadata();\ndefaults.set(\"theme\", \"light\");\ndefaults.set(\"timeout\", \"5000\");\n\nconst env = new Metadata();\nenv.set(\"timeout\", \"10000\");  // Override defaults\n\nconst config = new Metadata(defaults, env);\nconfig.set(\"api_key\", \"secret123\");\n\nconsole.log(config.get(\"theme\"));    // \"light\" (from defaults)\nconsole.log(config.get(\"timeout\"));  // \"10000\" (from env, overrides defaults)\nconsole.log(config.get(\"api_key\"));  // \"secret123\" (local)\n</code></pre> <p>Array Syntax:</p> <pre><code>const parents = [metadata1, metadata2, metadata3];\nconst child = new Metadata(parents);\n</code></pre>"},{"location":"api/metadata/#methods","title":"Methods","text":""},{"location":"api/metadata/#get","title":"get()","text":"<pre><code>get(key: string, fallback: string | null = null): string | null\n</code></pre> <p>Retrieves a value with hierarchical fallback. Searches locally first, then through parent nodes in order.</p> <p>Parameters: - key: The key to retrieve - fallback: Default value if key not found (default: <code>null</code>)</p> <p>Returns: The value found or the fallback</p> <p>Example:</p> <pre><code>const parent = new Metadata();\nparent.set(\"color\", \"blue\");\nparent.set(\"size\", \"large\");\n\nconst child = new Metadata(parent);\nchild.set(\"color\", \"red\");       // Override\nchild.set(\"shape\", \"circle\");    // New local value\n\nconsole.log(child.get(\"color\"));  // \"red\" (local override)\nconsole.log(child.get(\"size\"));   // \"large\" (inherited)\nconsole.log(child.get(\"shape\"));  // \"circle\" (local)\nconsole.log(child.get(\"missing\", \"default\")); // \"default\" (fallback)\n</code></pre> <p>Fallback Chain:</p> <pre><code>const m1 = new Metadata();\nm1.set(\"key\", \"value1\");\n\nconst m2 = new Metadata();\nm2.set(\"key\", \"value2\");\n\nconst m3 = new Metadata(m1, m2);\n\n// Searches: m3 (not found) \u2192 m1 (found \"value1\") \u2192 m2 (found \"value2\")\n// Returns last found: \"value2\"\nconsole.log(m3.get(\"key\")); // \"value2\"\n</code></pre>"},{"location":"api/metadata/#has","title":"has()","text":"<pre><code>has(key: string): boolean\n</code></pre> <p>Checks if a key exists and is not marked as deleted. Searches locally first, then through parent nodes.</p> <p>Parameters: - key: The key to check</p> <p>Returns: <code>true</code> if key exists and not deleted, <code>false</code> otherwise</p> <p>Example:</p> <pre><code>const parent = new Metadata();\nparent.set(\"feature_a\", \"enabled\");\nparent.set(\"feature_b\", \"disabled\");\n\nconst child = new Metadata(parent);\nchild.set(\"feature_c\", \"enabled\");\nchild.set(\"feature_a\", null);  // Mark as deleted locally\n\nconsole.log(child.has(\"feature_a\")); // false (deleted locally)\nconsole.log(child.has(\"feature_b\")); // true (inherited)\nconsole.log(child.has(\"feature_c\")); // true (local)\nconsole.log(child.has(\"feature_d\")); // false (doesn't exist)\n</code></pre> <p>Deletion Behavior:</p> <pre><code>const m = new Metadata();\nm.set(\"key\", \"value\");\nconsole.log(m.has(\"key\")); // true\n\nm.set(\"key\", null);  // Mark as deleted\nconsole.log(m.has(\"key\")); // false\n\nm.delete(\"key\");  // Same as set(key, null)\nconsole.log(m.has(\"key\")); // false\n</code></pre>"},{"location":"api/metadata/#set","title":"set()","text":"<pre><code>set(key: string, value: string | null | undefined): this\n</code></pre> <p>Sets a value locally in this node. If value is <code>null</code> or <code>undefined</code>, marks the key as deleted.</p> <p>Parameters: - key: The key to set - value: The value to store, or <code>null</code>/<code>undefined</code> to delete</p> <p>Returns: <code>this</code> for method chaining</p> <p>Example:</p> <pre><code>const metadata = new Metadata();\n\n// Set values\nmetadata.set(\"user_id\", \"12345\");\nmetadata.set(\"session_token\", \"abc123\");\n\n// Delete values (mark as null)\nmetadata.set(\"temp_data\", null);\nmetadata.set(\"cache_key\", undefined);\n\n// Method chaining\nmetadata\n  .set(\"config1\", \"value1\")\n  .set(\"config2\", \"value2\")\n  .set(\"old_config\", null);  // Delete\n</code></pre> <p>Override Behavior:</p> <pre><code>const parent = new Metadata();\nparent.set(\"theme\", \"light\");\n\nconst child = new Metadata(parent);\nchild.set(\"theme\", \"dark\");  // Override parent\n\nconsole.log(parent.get(\"theme\")); // \"light\" (unchanged)\nconsole.log(child.get(\"theme\"));  // \"dark\" (overridden)\n</code></pre>"},{"location":"api/metadata/#delete","title":"delete()","text":"<pre><code>delete(key: string): this\n</code></pre> <p>Marks a key as deleted locally. Equivalent to <code>set(key, null)</code>.</p> <p>Parameters: - key: The key to delete</p> <p>Returns: <code>this</code> for method chaining</p> <p>Example:</p> <pre><code>const parent = new Metadata();\nparent.set(\"config\", \"value\");\n\nconst child = new Metadata(parent);\nchild.delete(\"config\");  // Delete locally, doesn't affect parent\n\nconsole.log(child.has(\"config\")); // false (deleted)\nconsole.log(parent.has(\"config\")); // true (not affected)\n</code></pre>"},{"location":"api/metadata/#clear","title":"clear()","text":"<pre><code>clear(): this\n</code></pre> <p>Removes all local data from this node. Does not affect parent nodes.</p> <p>Returns: <code>this</code> for method chaining</p> <p>Example:</p> <pre><code>const parent = new Metadata();\nparent.set(\"inherited\", \"value\");\n\nconst child = new Metadata(parent);\nchild.set(\"local1\", \"value1\");\nchild.set(\"local2\", \"value2\");\n\n// Clear only local data\nchild.clear();\n\nconsole.log(child.get(\"local1\"));    // null (cleared)\nconsole.log(child.get(\"inherited\")); // \"value\" (inherited, not affected)\n</code></pre>"},{"location":"api/metadata/#use","title":"use()","text":"<pre><code>use(...nodes: (Metadata | Metadata[])[]): this\n</code></pre> <p>Dynamically adds parent nodes to the broker for inheritance. Supports the same flexible syntax as the constructor.</p> <p>Parameters: - nodes: Parent node(s) to add - supports individual, array, or spread syntax</p> <p>Returns: <code>this</code> for method chaining</p> <p>Example:</p> <pre><code>const base = new Metadata();\nbase.set(\"app\", \"MyApp\");\n\nconst theme = new Metadata();\ntheme.set(\"color\", \"blue\");\n\nconst config = new Metadata();\nconfig.set(\"local\", \"value\");\n\n// Add parents dynamically\nconfig.use(base);           // Single node\nconfig.use([theme]);        // Array of nodes\nconfig.use(base, theme);    // Multiple nodes\n\n// Method chaining\nconfig\n  .use(base)\n  .use(theme)\n  .set(\"final\", \"configured\");\n\nconsole.log(config.get(\"app\"));   // \"MyApp\" (from base)\nconsole.log(config.get(\"color\")); // \"blue\" (from theme)\nconsole.log(config.get(\"local\")); // \"value\" (local)\n</code></pre> <p>Runtime Composition:</p> <pre><code>const metadata = new Metadata();\nmetadata.set(\"local\", \"value\");\n\n// Start with no parents\nconsole.log(metadata.get(\"inherited\")); // null\n\n// Add parent at runtime\nconst parent = new Metadata();\nparent.set(\"inherited\", \"from_parent\");\nmetadata.use(parent);\n\n// Now inherits from parent\nconsole.log(metadata.get(\"inherited\")); // \"from_parent\"\n</code></pre>"},{"location":"api/metadata/#all","title":"all()","text":"<pre><code>all(): Record&lt;string, string&gt;\n</code></pre> <p>Returns all available data by combining inheritance and local values. Excludes <code>null</code> and <code>undefined</code> values.</p> <p>Returns: Object with all available key-value pairs</p> <p>Example:</p> <pre><code>const defaults = new Metadata();\ndefaults.set(\"theme\", \"light\");\ndefaults.set(\"debug\", \"false\");\n\nconst user = new Metadata(defaults);\nuser.set(\"theme\", \"dark\");  // Override\nuser.set(\"lang\", \"es\");     // New\nuser.set(\"debug\", null);    // Delete\n\nconst all_config = user.all();\nconsole.log(all_config);\n// {\n//   theme: \"dark\",  // Override local\n//   lang: \"es\"      // Local value\n//   // debug excluded (deleted with null)\n// }\n</code></pre>"},{"location":"api/metadata/#tojson","title":"toJSON()","text":"<pre><code>toJSON(): Record&lt;string, string&gt;\n</code></pre> <p>Native JSON serialization that combines inheritance and local data. Called automatically by <code>JSON.stringify()</code>.</p> <p>Returns: Serializable object with all available values</p> <p>Example:</p> <pre><code>const parent = new Metadata();\nparent.set(\"inherited\", \"value\");\n\nconst child = new Metadata(parent);\nchild.set(\"local\", \"data\");\n\n// Automatic serialization\nconst json_string = JSON.stringify(child);\nconsole.log(json_string); // {\"inherited\":\"value\",\"local\":\"data\"}\n\n// Manual call for object spread\nconst combined = { ...child.toJSON(), extra: \"value\" };\nconsole.log(combined); // { inherited: \"value\", local: \"data\", extra: \"value\" }\n</code></pre>"},{"location":"api/metadata/#inheritance-rules","title":"Inheritance Rules","text":""},{"location":"api/metadata/#fallback-chain","title":"Fallback Chain","text":"<p>Metadata searches for values in this order:</p> <ol> <li>Local data - Values set directly on this instance</li> <li>Broker nodes - Parent nodes in the order they were added</li> <li>Fallback - Default value provided to <code>get()</code></li> </ol> <pre><code>const m1 = new Metadata();\nm1.set(\"key\", \"from_m1\");\n\nconst m2 = new Metadata();\nm2.set(\"key\", \"from_m2\");\n\nconst m3 = new Metadata(m1, m2);\nm3.set(\"other\", \"local\");\n\nconsole.log(m3.get(\"key\"));   // \"from_m2\" (last broker wins)\nconsole.log(m3.get(\"other\")); // \"local\" (local value)\n</code></pre>"},{"location":"api/metadata/#override-behavior","title":"Override Behavior","text":"<p>Local values always take precedence:</p> <pre><code>const parent = new Metadata();\nparent.set(\"config\", \"parent_value\");\n\nconst child = new Metadata(parent);\nchild.set(\"config\", \"child_value\");\n\nconsole.log(child.get(\"config\")); // \"child_value\" (local override)\nconsole.log(parent.get(\"config\")); // \"parent_value\" (unchanged)\n</code></pre>"},{"location":"api/metadata/#deletion-markers","title":"Deletion Markers","text":"<p>Using <code>null</code> marks a key as deleted locally without affecting parent:</p> <pre><code>const parent = new Metadata();\nparent.set(\"feature\", \"enabled\");\n\nconst child = new Metadata(parent);\nconsole.log(child.get(\"feature\")); // \"enabled\" (inherited)\n\nchild.set(\"feature\", null);  // Mark as deleted\nconsole.log(child.has(\"feature\")); // false (deleted locally)\nconsole.log(parent.has(\"feature\")); // true (parent unaffected)\n</code></pre>"},{"location":"api/metadata/#common-patterns","title":"Common Patterns","text":""},{"location":"api/metadata/#pattern-configuration-layers","title":"Pattern: Configuration Layers","text":"<p>Build configuration from multiple sources:</p> <pre><code>// Default configuration\nconst defaults = new Metadata();\ndefaults.set(\"timeout\", \"5000\");\ndefaults.set(\"retries\", \"3\");\ndefaults.set(\"log_level\", \"info\");\n\n// Environment-specific overrides\nconst production = new Metadata();\nproduction.set(\"timeout\", \"30000\");\nproduction.set(\"log_level\", \"error\");\n\n// User preferences\nconst user_prefs = new Metadata();\nuser_prefs.set(\"theme\", \"dark\");\n\n// Final configuration\nconst config = new Metadata(defaults, production, user_prefs);\n\nconsole.log(config.get(\"timeout\"));   // \"30000\" (from production)\nconsole.log(config.get(\"retries\"));   // \"3\" (from defaults)\nconsole.log(config.get(\"log_level\")); // \"error\" (from production)\nconsole.log(config.get(\"theme\"));     // \"dark\" (from user_prefs)\n</code></pre>"},{"location":"api/metadata/#pattern-feature-flags","title":"Pattern: Feature Flags","text":"<p>Manage feature toggles with inheritance:</p> <pre><code>const global_features = new Metadata();\nglobal_features.set(\"analytics\", \"true\");\nglobal_features.set(\"beta_ui\", \"false\");\nglobal_features.set(\"experimental\", \"false\");\n\nconst beta_features = new Metadata(global_features);\nbeta_features.set(\"beta_ui\", \"true\");  // Enable for beta users\n\nconst admin_features = new Metadata(beta_features);\nadmin_features.set(\"experimental\", \"true\");  // Enable for admins\n\n// Check features\nif (admin_features.get(\"analytics\") === \"true\") {\n  // Track analytics\n}\n\nif (admin_features.get(\"experimental\") === \"true\") {\n  // Show experimental features\n}\n</code></pre>"},{"location":"api/metadata/#pattern-multi-tenant-configuration","title":"Pattern: Multi-Tenant Configuration","text":"<p>Separate tenant-specific configuration:</p> <pre><code>const app_config = new Metadata();\napp_config.set(\"app_name\", \"MyApp\");\napp_config.set(\"version\", \"1.0.0\");\n\nconst tenant_a = new Metadata(app_config);\ntenant_a.set(\"tenant_id\", \"A\");\ntenant_a.set(\"branding_color\", \"#FF0000\");\n\nconst tenant_b = new Metadata(app_config);\ntenant_b.set(\"tenant_id\", \"B\");\ntenant_b.set(\"branding_color\", \"#00FF00\");\n\nconsole.log(tenant_a.get(\"app_name\")); // \"MyApp\" (inherited)\nconsole.log(tenant_a.get(\"tenant_id\")); // \"A\" (local)\nconsole.log(tenant_b.get(\"tenant_id\")); // \"B\" (local)\n</code></pre>"},{"location":"api/metadata/#pattern-runtime-configuration","title":"Pattern: Runtime Configuration","text":"<p>Add configuration sources dynamically:</p> <pre><code>const config = new Metadata();\nconfig.set(\"app\", \"MyApp\");\n\n// Load defaults\nconst defaults = new Metadata();\ndefaults.set(\"timeout\", \"5000\");\nconfig.use(defaults);\n\n// Load from environment\nconst env_config = new Metadata();\nenv_config.set(\"api_url\", process.env.API_URL || \"\");\nconfig.use(env_config);\n\n// Load user preferences\nconst user_prefs = await loadUserPreferences();\nconfig.use(user_prefs);\n\n// All configs now available\nconsole.log(config.all());\n</code></pre>"},{"location":"api/metadata/#best-practices","title":"Best Practices","text":""},{"location":"api/metadata/#1-use-descriptive-keys","title":"1. Use Descriptive Keys","text":"<p>Choose clear, namespaced keys:</p> <pre><code>// \u2705 Good: Clear, namespaced keys\nmetadata.set(\"database.host\", \"localhost\");\nmetadata.set(\"database.port\", \"5432\");\nmetadata.set(\"feature.analytics\", \"true\");\n\n// \u274c Bad: Vague keys\nmetadata.set(\"host\", \"localhost\");\nmetadata.set(\"port\", \"5432\");\nmetadata.set(\"flag\", \"true\");\n</code></pre>"},{"location":"api/metadata/#2-provide-sensible-defaults","title":"2. Provide Sensible Defaults","text":"<p>Always provide fallback values:</p> <pre><code>// \u2705 Good: Always provide defaults\nconst timeout = parseInt(config.get(\"timeout\", \"5000\"));\nconst theme = config.get(\"theme\", \"light\");\n\n// \u274c Bad: No fallback (might be null)\nconst timeout = parseInt(config.get(\"timeout\"));  // NaN if not found\n</code></pre>"},{"location":"api/metadata/#3-document-inheritance-layers","title":"3. Document Inheritance Layers","text":"<p>Make inheritance hierarchies clear:</p> <pre><code>// \u2705 Good: Clear hierarchy\nconst global_config = new Metadata();       // Layer 1: Global defaults\nconst app_config = new Metadata(global_config);    // Layer 2: App config\nconst user_config = new Metadata(app_config);      // Layer 3: User prefs\n\n// \u274c Bad: Unclear relationships\nconst config1 = new Metadata(config2, config3, config4);\n</code></pre>"},{"location":"api/metadata/#4-use-type-conversion","title":"4. Use Type Conversion","text":"<p>Convert string values appropriately:</p> <pre><code>const config = new Metadata();\nconfig.set(\"port\", \"3000\");\nconfig.set(\"debug\", \"true\");\nconfig.set(\"timeout\", \"5000\");\n\n// Convert to appropriate types\nconst port = parseInt(config.get(\"port\", \"3000\"));\nconst debug = config.get(\"debug\", \"false\") === \"true\";\nconst timeout = parseFloat(config.get(\"timeout\", \"5000\"));\n</code></pre>"},{"location":"api/metadata/#5-clean-up-temporary-data","title":"5. Clean Up Temporary Data","text":"<p>Use <code>clear()</code> to remove temporary values:</p> <pre><code>const session = new Metadata();\nsession.set(\"temp_token\", \"abc123\");\nsession.set(\"cache_data\", \"...\");\n\n// Clean up after use\nsession.clear();\n\n// But keep inherited config\nconsole.log(session.get(\"app_name\")); // Still available from parent\n</code></pre>"},{"location":"api/metadata/#type-safety","title":"Type Safety","text":"<p>Metadata is fully typed with TypeScript:</p> <pre><code>import { Metadata } from '@arcaelas/agent';\n\n// Create instance\nconst metadata: Metadata = new Metadata();\n\n// Type-safe methods\nmetadata.set(\"key\", \"value\");              // \u2705 string value\nmetadata.set(\"key\", null);                 // \u2705 null (deletion marker)\nconst value: string | null = metadata.get(\"key\");  // \u2705 Correctly typed\n\n// Method chaining preserves type\nconst result: Metadata = metadata\n  .set(\"a\", \"1\")\n  .set(\"b\", \"2\")\n  .use(other_metadata);\n\n// Serialization types\nconst all: Record&lt;string, string&gt; = metadata.all();\nconst json: Record&lt;string, string&gt; = metadata.toJSON();\n</code></pre>"},{"location":"api/metadata/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/metadata/#efficient-lookups","title":"Efficient Lookups","text":"<p>Lookups are O(n) where n is the number of broker nodes. Keep broker lists small:</p> <pre><code>// \u2705 Good: Few broker nodes\nconst config = new Metadata(defaults, env, user);  // 3 nodes\n\n// \u274c Bad: Too many broker nodes\nconst config = new Metadata(\n  defaults, env1, env2, env3, user1, user2, user3, ...  // Many nodes\n);\n</code></pre>"},{"location":"api/metadata/#memory-management","title":"Memory Management","text":"<p>Metadata instances are lightweight. Create them freely:</p> <pre><code>// \u2705 Fine: Create per-request metadata\napp.use((req, res, next) =&gt; {\n  req.metadata = new Metadata(global_config);\n  req.metadata.set(\"request_id\", generateId());\n  next();\n});\n</code></pre>"},{"location":"api/metadata/#related","title":"Related","text":"<ul> <li>Context - Uses Metadata for configuration</li> <li>Agent - Accepts Metadata in configuration</li> <li>Core Concepts - Architecture overview</li> </ul> <p>Next: Learn about Tool \u2192</p>"},{"location":"api/providers/","title":"Providers","text":"<p>Providers are functions that integrate AI services (OpenAI, Anthropic, Groq, etc.) with agents. They receive context and return chat completions in OpenAI-compatible format.</p>"},{"location":"api/providers/#overview","title":"Overview","text":"<p>Providers enable multi-provider failover and vendor flexibility through a standard interface.</p>"},{"location":"api/providers/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Standard OpenAI ChatCompletion format</li> <li>\u2705 Automatic failover between providers</li> <li>\u2705 Support for any AI service (OpenAI, Anthropic, Groq, custom)</li> <li>\u2705 Access to full agent context</li> <li>\u2705 Tool call support</li> </ul>"},{"location":"api/providers/#provider-function-signature","title":"Provider Function Signature","text":"<pre><code>type Provider = (context: Agent) =&gt; Promise&lt;ChatCompletion&gt;;\n</code></pre> <p>Parameters: - context: Full agent instance with messages, tools, rules, metadata</p> <p>Returns: OpenAI-compatible ChatCompletion object</p>"},{"location":"api/providers/#chatcompletion-format","title":"ChatCompletion Format","text":"<pre><code>interface ChatCompletion {\n  id: string;\n  object: \"chat.completion\";\n  created: number;\n  model: string;\n  choices: Array&lt;{\n    index: number;\n    message: {\n      role: \"assistant\";\n      content: string;\n      tool_calls?: Array&lt;{\n        id: string;\n        type: \"function\";\n        function: {\n          name: string;\n          arguments: string;  // JSON string\n        };\n      }&gt;;\n    };\n    finish_reason: \"stop\" | \"tool_calls\" | \"length\" | null;\n  }&gt;;\n}\n</code></pre>"},{"location":"api/providers/#provider-examples","title":"Provider Examples","text":""},{"location":"api/providers/#openai-provider","title":"OpenAI Provider","text":"<pre><code>import OpenAI from 'openai';\nimport type { Provider } from '@arcaelas/agent';\n\nconst openai_provider: Provider = async (agent) =&gt; {\n  const openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n  });\n\n  return await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: agent.messages.map(m =&gt; ({\n      role: m.role,\n      content: m.content,\n      ...(m.tool_id &amp;&amp; { tool_call_id: m.tool_id })\n    })),\n    tools: agent.tools?.map(tool =&gt; ({\n      type: \"function\",\n      function: {\n        name: tool.name,\n        description: tool.description,\n        parameters: {\n          type: \"object\",\n          properties: tool.parameters,\n          required: Object.keys(tool.parameters)\n        }\n      }\n    }))\n  });\n};\n</code></pre>"},{"location":"api/providers/#anthropic-provider","title":"Anthropic Provider","text":"<pre><code>import Anthropic from '@anthropic-ai/sdk';\nimport type { Provider } from '@arcaelas/agent';\n\nconst anthropic_provider: Provider = async (agent) =&gt; {\n  const anthropic = new Anthropic({\n    apiKey: process.env.ANTHROPIC_API_KEY\n  });\n\n  const response = await anthropic.messages.create({\n    model: \"claude-3-sonnet-20240229\",\n    max_tokens: 4000,\n    messages: agent.messages\n      .filter(m =&gt; m.role !== \"system\")\n      .map(m =&gt; ({\n        role: m.role === \"assistant\" ? \"assistant\" : \"user\",\n        content: m.content\n      }))\n  });\n\n  // Convert Anthropic format to OpenAI format\n  return {\n    id: response.id,\n    object: \"chat.completion\",\n    created: Math.floor(Date.now() / 1000),\n    model: \"claude-3-sonnet\",\n    choices: [{\n      index: 0,\n      message: {\n        role: \"assistant\",\n        content: response.content[0].type === \"text\"\n          ? response.content[0].text\n          : \"\"\n      },\n      finish_reason: \"stop\"\n    }]\n  };\n};\n</code></pre>"},{"location":"api/providers/#groq-provider","title":"Groq Provider","text":"<pre><code>import Groq from 'groq-sdk';\nimport type { Provider } from '@arcaelas/agent';\n\nconst groq_provider: Provider = async (agent) =&gt; {\n  const groq = new Groq({\n    apiKey: process.env.GROQ_API_KEY\n  });\n\n  return await groq.chat.completions.create({\n    model: \"llama-3.1-70b-versatile\",\n    messages: agent.messages.map(m =&gt; ({\n      role: m.role,\n      content: m.content\n    })),\n    tools: agent.tools?.map(tool =&gt; ({\n      type: \"function\",\n      function: {\n        name: tool.name,\n        description: tool.description,\n        parameters: {\n          type: \"object\",\n          properties: tool.parameters\n        }\n      }\n    }))\n  });\n};\n</code></pre>"},{"location":"api/providers/#multi-provider-setup","title":"Multi-Provider Setup","text":"<p>Configure automatic failover:</p> <pre><code>import { Agent } from '@arcaelas/agent';\n\nconst agent = new Agent({\n  name: \"Resilient_Assistant\",\n  description: \"High-availability AI assistant\",\n  providers: [\n    openai_provider,      // Primary (fastest)\n    groq_provider,        // Backup (fast alternative)\n    anthropic_provider    // Fallback (reliable)\n  ]\n});\n\n// Agent automatically tries providers in order on failure\nconst [messages, success] = await agent.call(\"Hello\");\n</code></pre>"},{"location":"api/providers/#best-practices","title":"Best Practices","text":""},{"location":"api/providers/#1-handle-errors-gracefully","title":"1. Handle Errors Gracefully","text":"<pre><code>const safe_provider: Provider = async (agent) =&gt; {\n  try {\n    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    return await openai.chat.completions.create({...});\n  } catch (error) {\n    console.error(\"Provider failed:\", error);\n    throw error;  // Let agent try next provider\n  }\n};\n</code></pre>"},{"location":"api/providers/#2-implement-timeouts","title":"2. Implement Timeouts","text":"<pre><code>const timeout_provider: Provider = async (agent) =&gt; {\n  const controller = new AbortController();\n  const timeout = setTimeout(() =&gt; controller.abort(), 30000);  // 30s timeout\n\n  try {\n    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    const response = await openai.chat.completions.create({\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeout);\n    return response;\n  } catch (error) {\n    clearTimeout(timeout);\n    throw error;\n  }\n};\n</code></pre>"},{"location":"api/providers/#3-use-environment-variables","title":"3. Use Environment Variables","text":"<pre><code>const secure_provider: Provider = async (agent) =&gt; {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"OPENAI_API_KEY not configured\");\n  }\n\n  const openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n    baseURL: process.env.OPENAI_BASE_URL  // Optional custom endpoint\n  });\n\n  return await openai.chat.completions.create({...});\n};\n</code></pre>"},{"location":"api/providers/#4-log-provider-usage","title":"4. Log Provider Usage","text":"<pre><code>const logged_provider: Provider = async (agent) =&gt; {\n  const start = Date.now();\n\n  try {\n    const response = await openai_provider(agent);\n    const duration = Date.now() - start;\n\n    console.log({\n      provider: \"openai\",\n      model: response.model,\n      duration_ms: duration,\n      tokens: response.usage?.total_tokens,\n      success: true\n    });\n\n    return response;\n  } catch (error) {\n    console.error({\n      provider: \"openai\",\n      duration_ms: Date.now() - start,\n      error: error.message,\n      success: false\n    });\n    throw error;\n  }\n};\n</code></pre>"},{"location":"api/providers/#related","title":"Related","text":"<ul> <li>Agent - Uses providers for completions</li> <li>Message - Provider input/output format</li> <li>Tool - Providers handle tool calls</li> <li>Providers Guide - Detailed provider setup</li> </ul> <p>Next: Learn about Built-in Tools \u2192</p>"},{"location":"api/rule/","title":"Rule","text":"<p>Rule defines behavioral guidelines and constraints for AI agents. Rules can be static (always active) or conditional (evaluated at runtime based on agent state).</p>"},{"location":"api/rule/#overview","title":"Overview","text":"<p>Rules guide agent behavior through:</p> <ul> <li>Static Rules: Always-active behavioral guidelines</li> <li>Conditional Rules: Applied based on runtime evaluation</li> <li>Context-Aware: Access to agent metadata and message history</li> <li>Async Support: Support for async condition evaluation</li> </ul>"},{"location":"api/rule/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Two-tier API (static and conditional)</li> <li>\u2705 Runtime condition evaluation</li> <li>\u2705 Access to agent context</li> <li>\u2705 Sync and async conditions</li> <li>\u2705 Type-safe with full TypeScript support</li> </ul>"},{"location":"api/rule/#constructor","title":"Constructor","text":"<p>Rule has two constructor overloads:</p>"},{"location":"api/rule/#static-rule","title":"Static Rule","text":"<pre><code>new Rule(description: string)\n</code></pre> <p>Creates a rule that is always active.</p> <p>Parameters: - description: Textual description defining the behavior</p> <p>Example:</p> <pre><code>import { Rule } from '@arcaelas/agent';\n\n// Always-active rules\nconst politeness = new Rule(\"Maintain a professional and courteous tone\");\nconst privacy = new Rule(\"Never share user personal information\");\nconst helpfulness = new Rule(\"Provide comprehensive and useful answers\");\n</code></pre>"},{"location":"api/rule/#conditional-rule","title":"Conditional Rule","text":"<pre><code>new Rule(description: string, options: RuleOptions)\n</code></pre> <p>Creates a rule that applies only when specific conditions are met.</p> <p>Parameters: - description: Textual description defining the behavior - options: Configuration object with condition function</p>"},{"location":"api/rule/#ruleoptions","title":"RuleOptions","text":"<pre><code>interface RuleOptions {\n  /** Function determining when the rule applies */\n  when: (agent: Agent) =&gt; boolean | Promise&lt;boolean&gt;;\n}\n</code></pre> <p>Example:</p> <pre><code>import { Rule } from '@arcaelas/agent';\n\n// Time-based rule\nconst business_hours_rule = new Rule(\n  \"Inform about phone support availability\",\n  {\n    when: (agent) =&gt; {\n      const hour = new Date().getHours();\n      return hour &lt; 9 || hour &gt; 17;  // Outside business hours\n    }\n  }\n);\n\n// Tier-based rule\nconst premium_support = new Rule(\n  \"Offer priority support and premium benefits\",\n  {\n    when: (agent) =&gt; {\n      const tier = agent.metadata.get(\"customer_tier\", \"\");\n      return tier === \"gold\" || tier === \"platinum\";\n    }\n  }\n);\n\n// Complex async rule\nconst loyalty_discount = new Rule(\n  \"Apply 15% loyalty discount\",\n  {\n    when: async (agent) =&gt; {\n      const purchases = agent.metadata.get(\"total_purchases\", \"0\");\n      const member_since = agent.metadata.get(\"member_since\", \"\");\n\n      if (!member_since) return false;\n\n      const years_active =\n        (Date.now() - new Date(member_since).getTime()) /\n        (1000 * 60 * 60 * 24 * 365);\n\n      return parseInt(purchases) &gt; 10 &amp;&amp; years_active &gt; 2;\n    }\n  }\n);\n</code></pre>"},{"location":"api/rule/#properties","title":"Properties","text":""},{"location":"api/rule/#description","title":"description","text":"<pre><code>readonly description: string\n</code></pre> <p>Human-readable description of the behavioral guideline.</p> <p>Example:</p> <pre><code>const rule = new Rule(\"Always validate user input\");\nconsole.log(rule.description); // \"Always validate user input\"\n</code></pre>"},{"location":"api/rule/#when","title":"when","text":"<pre><code>readonly when: (agent: Agent) =&gt; boolean | Promise&lt;boolean&gt;\n</code></pre> <p>Function determining when the rule applies. For static rules, always returns <code>true</code>.</p> <p>Example:</p> <pre><code>// Static rule when function\nconst static_rule = new Rule(\"Be helpful\");\nconsole.log(await static_rule.when(agent)); // true (always)\n\n// Conditional rule when function\nconst conditional = new Rule(\"Escalate to human\", {\n  when: (agent) =&gt; {\n    const messages = agent.messages;\n    return messages.length &gt; 10;  // Escalate after 10 messages\n  }\n});\n\nconsole.log(await conditional.when(agent)); // true or false\n</code></pre>"},{"location":"api/rule/#length","title":"length","text":"<pre><code>get length(): number\n</code></pre> <p>Returns the character length of the description.</p> <p>Example:</p> <pre><code>const rule = new Rule(\"Maintain professional tone\");\nconsole.log(rule.length); // 26\n</code></pre>"},{"location":"api/rule/#methods","title":"Methods","text":""},{"location":"api/rule/#tojson","title":"toJSON()","text":"<pre><code>toJSON(): {\n  description: string;\n  when: string;\n}\n</code></pre> <p>Serializes the rule metadata. The <code>when</code> function is represented as the string <code>\"[Function]\"</code>.</p> <p>Returns: Serializable representation</p> <p>Example:</p> <pre><code>const rule = new Rule(\"Be polite\", {\n  when: (agent) =&gt; agent.metadata.get(\"user_type\") === \"customer\"\n});\n\nconsole.log(JSON.stringify(rule));\n// {\"description\":\"Be polite\",\"when\":\"[Function]\"}\n\nconst data = rule.toJSON();\nconsole.log(data.description); // \"Be polite\"\nconsole.log(data.when);        // \"[Function]\"\n</code></pre>"},{"location":"api/rule/#tostring","title":"toString()","text":"<pre><code>toString(): string\n</code></pre> <p>Returns string representation for debugging. Long descriptions are truncated to 50 characters.</p> <p>Returns: String in format <code>\"Rule: description [Function]\"</code></p> <p>Example:</p> <pre><code>const rule = new Rule(\"Always provide detailed explanations\");\nconsole.log(rule.toString());\n// \"Rule: Always provide detailed explanations [Function]\"\n\nconst long_rule = new Rule(\"This is a very long rule description that will be truncated when displayed\");\nconsole.log(long_rule.toString());\n// \"Rule: This is a very long rule description that wi... [Function]\"\n</code></pre>"},{"location":"api/rule/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/rule/#pattern-time-based-rules","title":"Pattern: Time-Based Rules","text":"<p>Apply rules based on time conditions:</p> <pre><code>const night_mode = new Rule(\n  \"Use concise responses and suggest using callback feature\",\n  {\n    when: (agent) =&gt; {\n      const hour = new Date().getHours();\n      return hour &gt;= 22 || hour &lt; 6;  // Between 10 PM and 6 AM\n    }\n  }\n);\n\nconst weekend_rule = new Rule(\n  \"Inform that technical support is limited on weekends\",\n  {\n    when: (agent) =&gt; {\n      const day = new Date().getDay();\n      return day === 0 || day === 6;  // Sunday or Saturday\n    }\n  }\n);\n</code></pre>"},{"location":"api/rule/#pattern-user-tier-rules","title":"Pattern: User Tier Rules","text":"<p>Customize behavior based on user tier:</p> <pre><code>const basic_tier_rule = new Rule(\n  \"Offer upgrade to premium tier for advanced features\",\n  {\n    when: (agent) =&gt; {\n      const tier = agent.metadata.get(\"user_tier\", \"basic\");\n      return tier === \"basic\" || tier === \"free\";\n    }\n  }\n);\n\nconst enterprise_rule = new Rule(\n  \"Provide dedicated account manager contact information\",\n  {\n    when: (agent) =&gt; {\n      const tier = agent.metadata.get(\"user_tier\", \"\");\n      return tier === \"enterprise\";\n    }\n  }\n);\n</code></pre>"},{"location":"api/rule/#pattern-conversation-context-rules","title":"Pattern: Conversation Context Rules","text":"<p>Rules based on conversation state:</p> <pre><code>const escalation_rule = new Rule(\n  \"Escalate to human supervisor\",\n  {\n    when: (agent) =&gt; {\n      const messages = agent.messages;\n      const last_message = messages[messages.length - 1]?.content || \"\";\n\n      // Escalate if keywords detected\n      const escalation_keywords = [\"supervisor\", \"manager\", \"frustrated\", \"complaint\"];\n      return escalation_keywords.some(keyword =&gt;\n        last_message.toLowerCase().includes(keyword)\n      );\n    }\n  }\n);\n\nconst long_conversation_rule = new Rule(\n  \"Suggest summarizing the conversation and next steps\",\n  {\n    when: (agent) =&gt; agent.messages.length &gt; 15\n  }\n);\n</code></pre>"},{"location":"api/rule/#pattern-regional-compliance","title":"Pattern: Regional Compliance","text":"<p>Apply regional rules:</p> <pre><code>const gdpr_rule = new Rule(\n  \"Apply GDPR compliance: inform about data rights and provide data access options\",\n  {\n    when: (agent) =&gt; {\n      const region = agent.metadata.get(\"user_region\", \"\");\n      return region === \"EU\" || region === \"UK\";\n    }\n  }\n);\n\nconst ccpa_rule = new Rule(\n  \"Apply CCPA compliance: provide opt-out options for data collection\",\n  {\n    when: (agent) =&gt; {\n      const state = agent.metadata.get(\"user_state\", \"\");\n      return state === \"CA\";  // California\n    }\n  }\n);\n</code></pre>"},{"location":"api/rule/#best-practices","title":"Best Practices","text":""},{"location":"api/rule/#1-clear-descriptions","title":"1. Clear Descriptions","text":"<p>Write explicit, actionable rule descriptions:</p> <pre><code>// \u2705 Good: Clear and specific\nnew Rule(\"Always ask for order confirmation before processing payment\");\nnew Rule(\"Verify user identity using two-factor authentication for account changes\");\n\n// \u274c Bad: Vague\nnew Rule(\"Be careful\");\nnew Rule(\"Handle properly\");\n</code></pre>"},{"location":"api/rule/#2-simple-conditions","title":"2. Simple Conditions","text":"<p>Keep condition logic straightforward:</p> <pre><code>// \u2705 Good: Simple, readable condition\nnew Rule(\"Offer discount\", {\n  when: (agent) =&gt; {\n    const purchases = parseInt(agent.metadata.get(\"purchases\", \"0\"));\n    return purchases &gt; 5;\n  }\n});\n\n// \u274c Bad: Overly complex\nnew Rule(\"Complex logic\", {\n  when: (agent) =&gt; {\n    return (\n      parseInt(agent.metadata.get(\"a\", \"0\")) &gt; 5 &amp;&amp;\n      (agent.metadata.get(\"b\", \"\") === \"x\" || agent.metadata.get(\"c\", \"\") === \"y\") &amp;&amp;\n      agent.messages.length &gt; 3\n    );\n  }\n});\n</code></pre>"},{"location":"api/rule/#3-efficient-evaluation","title":"3. Efficient Evaluation","text":"<p>Optimize condition functions:</p> <pre><code>// \u2705 Good: Early return for efficiency\nnew Rule(\"Premium features\", {\n  when: (agent) =&gt; {\n    const tier = agent.metadata.get(\"tier\", \"\");\n    if (tier === \"premium\") return true;  // Early return\n\n    const trial = agent.metadata.get(\"trial\", \"false\");\n    return trial === \"true\";\n  }\n});\n</code></pre>"},{"location":"api/rule/#4-error-handling","title":"4. Error Handling","text":"<p>Handle errors in async conditions:</p> <pre><code>new Rule(\"External API check\", {\n  when: async (agent) =&gt; {\n    try {\n      const user_id = agent.metadata.get(\"user_id\", \"\");\n      const response = await fetch(`/api/check/${user_id}`);\n      const data = await response.json();\n      return data.eligible === true;\n    } catch (error) {\n      console.error(\"Rule condition failed:\", error);\n      return false;  // Fail gracefully\n    }\n  }\n});\n</code></pre>"},{"location":"api/rule/#type-safety","title":"Type Safety","text":"<p>Rule is fully typed with TypeScript:</p> <pre><code>import { Rule, RuleOptions } from '@arcaelas/agent';\nimport type { Agent } from '@arcaelas/agent';\n\n// Type-safe condition function\nconst condition: RuleOptions['when'] = (agent: Agent) =&gt; {\n  const value = agent.metadata.get(\"key\", \"\");\n  return value === \"expected\";\n};\n\nconst rule = new Rule(\"Description\", { when: condition });\n\n// Async condition with proper typing\nconst async_condition: RuleOptions['when'] = async (agent: Agent) =&gt; {\n  const data = await fetchData();\n  return data.valid === true;\n};\n\nconst async_rule = new Rule(\"Async rule\", { when: async_condition });\n</code></pre>"},{"location":"api/rule/#related","title":"Related","text":"<ul> <li>Context - Manages rules with inheritance</li> <li>Agent - Evaluates and applies rules</li> <li>Metadata - Used in rule conditions</li> <li>Core Concepts - Architecture overview</li> </ul> <p>Next: Learn about Message \u2192</p>"},{"location":"api/tool/","title":"Tool","text":"<p>Tool encapsulates functions that AI agents can execute. It provides a flexible API supporting both simple single-parameter functions and advanced multi-parameter operations.</p>"},{"location":"api/tool/#overview","title":"Overview","text":"<p>Tools enable agents to interact with external systems, process data, and perform specialized tasks:</p> <ul> <li>Simple Tools: Quick function wrapping with string input</li> <li>Advanced Tools: Structured parameters with descriptions</li> <li>Reusable: Share tools across multiple agents and contexts</li> <li>Type-Safe: Full TypeScript support with generics</li> </ul>"},{"location":"api/tool/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Two-tier API (simple and advanced)</li> <li>\u2705 Sync and async function support</li> <li>\u2705 Parameter schema definition</li> <li>\u2705 JSON serialization</li> <li>\u2705 Type-safe with TypeScript generics</li> <li>\u2705 Framework-agnostic</li> </ul>"},{"location":"api/tool/#constructor","title":"Constructor","text":"<p>Tool has two constructor overloads for different use cases:</p>"},{"location":"api/tool/#simple-tool","title":"Simple Tool","text":"<pre><code>new Tool(name: string, handler: (input: string) =&gt; any)\n</code></pre> <p>Creates a tool with a single string input parameter.</p> <p>Parameters: - name: Unique tool identifier - handler: Function that processes input and returns result</p> <p>Example:</p> <pre><code>import { Tool } from '@arcaelas/agent';\n\n// Weather tool\nconst weather_tool = new Tool('get_weather', (input: string) =&gt; {\n  // input: \"What's the weather in Madrid?\"\n  return \"Sunny, 24\u00b0C in Madrid\";\n});\n\n// Time tool\nconst time_tool = new Tool('get_time', () =&gt; {\n  return new Date().toLocaleString();\n});\n\n// File reader tool\nconst read_file = new Tool('read_file', async (path: string) =&gt; {\n  const content = await fs.readFile(path, 'utf-8');\n  return content;\n});\n</code></pre>"},{"location":"api/tool/#advanced-tool","title":"Advanced Tool","text":"<pre><code>new Tool&lt;T&gt;(name: string, options: ToolOptions&lt;T&gt;)\n</code></pre> <p>Creates a tool with structured parameters and detailed configuration.</p> <p>Parameters: - name: Unique tool identifier - options: Advanced configuration object</p>"},{"location":"api/tool/#tooloptions","title":"ToolOptions","text":"<pre><code>interface ToolOptions&lt;T = Record&lt;string, string&gt;&gt; {\n  /** Clear description of what the tool does */\n  description: string;\n\n  /** Parameter schema with descriptions */\n  parameters?: T;\n\n  /** Function to execute (sync or async) */\n  func(params: T): string | Promise&lt;string&gt;;\n}\n</code></pre> <p>Example:</p> <pre><code>import { Tool } from '@arcaelas/agent';\n\n// Database search tool\nconst search_tool = new Tool('search_database', {\n  description: 'Search customer database with filters',\n  parameters: {\n    query: 'Search query string',\n    limit: 'Maximum results to return (default: 10)',\n    category: 'Filter by category (optional)'\n  },\n  func: async ({ query, limit, category }) =&gt; {\n    const results = await database.search({\n      query,\n      limit: parseInt(limit || '10'),\n      category: category || null\n    });\n    return JSON.stringify(results);\n  }\n});\n\n// Calculator tool\nconst calculator = new Tool('calculate', {\n  description: 'Perform basic mathematical operations',\n  parameters: {\n    operation: 'Operation to perform (+, -, *, /)',\n    a: 'First number',\n    b: 'Second number'\n  },\n  func: ({ operation, a, b }) =&gt; {\n    const num_a = parseFloat(a);\n    const num_b = parseFloat(b);\n\n    switch (operation) {\n      case '+': return (num_a + num_b).toString();\n      case '-': return (num_a - num_b).toString();\n      case '*': return (num_a * num_b).toString();\n      case '/': return num_b !== 0\n        ? (num_a / num_b).toString()\n        : 'Error: Division by zero';\n      default: return 'Invalid operation';\n    }\n  }\n});\n</code></pre>"},{"location":"api/tool/#properties","title":"Properties","text":""},{"location":"api/tool/#name","title":"name","text":"<pre><code>readonly name: string\n</code></pre> <p>Unique identifier for the tool. Used for deduplication in contexts.</p> <p>Example:</p> <pre><code>const tool = new Tool('weather_api', () =&gt; \"...\");\nconsole.log(tool.name); // \"weather_api\"\n</code></pre>"},{"location":"api/tool/#description","title":"description","text":"<pre><code>readonly description: string\n</code></pre> <p>Human-readable description of what the tool does. For simple tools, defaults to the tool name.</p> <p>Example:</p> <pre><code>const tool = new Tool('search', {\n  description: 'Search through customer records',\n  func: () =&gt; \"...\"\n});\n\nconsole.log(tool.description); // \"Search through customer records\"\n</code></pre>"},{"location":"api/tool/#parameters","title":"parameters","text":"<pre><code>readonly parameters: T | { input: string }\n</code></pre> <p>Parameter schema describing expected inputs. Simple tools get <code>{ input: string }</code> automatically.</p> <p>Example:</p> <pre><code>// Simple tool parameters\nconst simple = new Tool('greet', (input) =&gt; `Hello ${input}`);\nconsole.log(simple.parameters); // { input: \"Entrada para la herramienta\" }\n\n// Advanced tool parameters\nconst advanced = new Tool('search', {\n  description: 'Search',\n  parameters: {\n    query: 'Search term',\n    limit: 'Max results'\n  },\n  func: () =&gt; \"...\"\n});\n\nconsole.log(advanced.parameters);\n// { query: \"Search term\", limit: \"Max results\" }\n</code></pre>"},{"location":"api/tool/#func","title":"func","text":"<pre><code>readonly func: (params: any) =&gt; any\n</code></pre> <p>The executable function. Can be sync or async.</p> <p>Example:</p> <pre><code>const tool = new Tool('process', (input) =&gt; {\n  return input.toUpperCase();\n});\n\n// Execute directly\nconst result = tool.func({ input: \"hello\" });\nconsole.log(result); // \"HELLO\"\n</code></pre>"},{"location":"api/tool/#methods","title":"Methods","text":""},{"location":"api/tool/#tojson","title":"toJSON()","text":"<pre><code>toJSON(): {\n  name: string;\n  description: string;\n  parameters: T | { input: string };\n}\n</code></pre> <p>Serializes tool metadata (excludes the function). Called automatically by <code>JSON.stringify()</code>.</p> <p>Returns: Serializable representation</p> <p>Example:</p> <pre><code>const tool = new Tool('calculator', {\n  description: 'Basic math operations',\n  parameters: {\n    operation: '+, -, *, /',\n    a: 'First number',\n    b: 'Second number'\n  },\n  func: () =&gt; \"...\"\n});\n\n// Automatic serialization\nconst json = JSON.stringify(tool);\nconsole.log(json);\n// {\n//   \"name\": \"calculator\",\n//   \"description\": \"Basic math operations\",\n//   \"parameters\": {\n//     \"operation\": \"+, -, *, /\",\n//     \"a\": \"First number\",\n//     \"b\": \"Second number\"\n//   }\n// }\n\n// Manual call\nconst data = tool.toJSON();\nconsole.log(data.name); // \"calculator\"\n</code></pre>"},{"location":"api/tool/#tostring","title":"toString()","text":"<pre><code>toString(): string\n</code></pre> <p>Returns human-readable string representation for debugging.</p> <p>Returns: String in format <code>\"Tool(name): description\"</code></p> <p>Example:</p> <pre><code>const tool = new Tool('weather', {\n  description: 'Get current weather',\n  func: () =&gt; \"...\"\n});\n\nconsole.log(tool.toString()); // \"Tool(weather): Get current weather\"\nconsole.log(String(tool));    // Same result\n</code></pre>"},{"location":"api/tool/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/tool/#pattern-api-integration","title":"Pattern: API Integration","text":"<p>Wrap external API calls:</p> <pre><code>const github_search = new Tool('github_search', {\n  description: 'Search GitHub repositories',\n  parameters: {\n    query: 'Search query',\n    language: 'Programming language filter (optional)',\n    stars: 'Minimum stars (optional)'\n  },\n  func: async ({ query, language, stars }) =&gt; {\n    const params = new URLSearchParams({ q: query });\n    if (language) params.append('language', language);\n    if (stars) params.append('stars', `&gt;=${stars}`);\n\n    const response = await fetch(\n      `https://api.github.com/search/repositories?${params}`\n    );\n\n    const data = await response.json();\n    return JSON.stringify(data.items.slice(0, 5));\n  }\n});\n</code></pre>"},{"location":"api/tool/#pattern-database-operations","title":"Pattern: Database Operations","text":"<p>Create CRUD tools:</p> <pre><code>const create_user = new Tool('create_user', {\n  description: 'Create new user account',\n  parameters: {\n    email: 'User email address',\n    name: 'User full name',\n    role: 'User role (admin, user, guest)'\n  },\n  func: async ({ email, name, role }) =&gt; {\n    const user = await db.users.create({\n      email,\n      name,\n      role: role || 'user'\n    });\n    return `User created with ID: ${user.id}`;\n  }\n});\n\nconst find_user = new Tool('find_user', {\n  description: 'Find user by email',\n  parameters: {\n    email: 'Email address to search'\n  },\n  func: async ({ email }) =&gt; {\n    const user = await db.users.findOne({ email });\n    return user ? JSON.stringify(user) : 'User not found';\n  }\n});\n</code></pre>"},{"location":"api/tool/#pattern-data-processing","title":"Pattern: Data Processing","text":"<p>Transform and analyze data:</p> <pre><code>const analyze_text = new Tool('analyze_text', {\n  description: 'Analyze text sentiment and extract keywords',\n  parameters: {\n    text: 'Text to analyze'\n  },\n  func: async ({ text }) =&gt; {\n    const sentiment = await nlp.sentiment(text);\n    const keywords = await nlp.keywords(text, { limit: 5 });\n\n    return JSON.stringify({\n      sentiment: sentiment.score,\n      keywords: keywords.map(k =&gt; k.word)\n    });\n  }\n});\n\nconst summarize = new Tool('summarize', {\n  description: 'Generate text summary',\n  parameters: {\n    text: 'Text to summarize',\n    max_length: 'Maximum summary length in words (default: 100)'\n  },\n  func: async ({ text, max_length }) =&gt; {\n    const summary = await nlp.summarize(text, {\n      maxLength: parseInt(max_length || '100')\n    });\n    return summary;\n  }\n});\n</code></pre>"},{"location":"api/tool/#pattern-file-operations","title":"Pattern: File Operations","text":"<p>Handle file system tasks:</p> <pre><code>const read_file = new Tool('read_file', {\n  description: 'Read file contents',\n  parameters: {\n    path: 'File path to read'\n  },\n  func: async ({ path }) =&gt; {\n    try {\n      const content = await fs.readFile(path, 'utf-8');\n      return content;\n    } catch (error) {\n      return `Error reading file: ${error.message}`;\n    }\n  }\n});\n\nconst list_directory = new Tool('list_directory', {\n  description: 'List files in directory',\n  parameters: {\n    path: 'Directory path',\n    pattern: 'File pattern to match (optional, e.g., *.js)'\n  },\n  func: async ({ path, pattern }) =&gt; {\n    const files = await fs.readdir(path);\n    const filtered = pattern\n      ? files.filter(f =&gt; minimatch(f, pattern))\n      : files;\n    return JSON.stringify(filtered);\n  }\n});\n</code></pre>"},{"location":"api/tool/#pattern-tool-composition","title":"Pattern: Tool Composition","text":"<p>Combine multiple operations:</p> <pre><code>const process_order = new Tool('process_order', {\n  description: 'Process customer order end-to-end',\n  parameters: {\n    order_id: 'Order ID to process',\n    notify_customer: 'Send notification email (true/false)'\n  },\n  func: async ({ order_id, notify_customer }) =&gt; {\n    // Validate order\n    const order = await db.orders.findById(order_id);\n    if (!order) return 'Order not found';\n\n    // Process payment\n    const payment = await stripe.charge(order.total, order.payment_method);\n    if (!payment.success) return 'Payment failed';\n\n    // Update inventory\n    await inventory.decrement(order.items);\n\n    // Send notification\n    if (notify_customer === 'true') {\n      await email.send(order.customer_email, 'Order Confirmed', {\n        order_id,\n        total: order.total\n      });\n    }\n\n    return `Order ${order_id} processed successfully`;\n  }\n});\n</code></pre>"},{"location":"api/tool/#error-handling","title":"Error Handling","text":"<p>Tools should handle errors gracefully:</p> <pre><code>const safe_api_call = new Tool('api_call', {\n  description: 'Make API call with error handling',\n  parameters: {\n    endpoint: 'API endpoint URL',\n    method: 'HTTP method (GET, POST, etc.)'\n  },\n  func: async ({ endpoint, method }) =&gt; {\n    try {\n      const response = await fetch(endpoint, { method });\n\n      if (!response.ok) {\n        return JSON.stringify({\n          error: true,\n          status: response.status,\n          message: response.statusText\n        });\n      }\n\n      const data = await response.json();\n      return JSON.stringify({ success: true, data });\n\n    } catch (error) {\n      return JSON.stringify({\n        error: true,\n        message: error.message\n      });\n    }\n  }\n});\n</code></pre>"},{"location":"api/tool/#best-practices","title":"Best Practices","text":""},{"location":"api/tool/#1-clear-naming","title":"1. Clear Naming","text":"<p>Use descriptive, action-oriented names:</p> <pre><code>// \u2705 Good: Clear action names\nnew Tool('search_customers', ...);\nnew Tool('create_invoice', ...);\nnew Tool('send_email', ...);\n\n// \u274c Bad: Vague names\nnew Tool('search', ...);\nnew Tool('create', ...);\nnew Tool('send', ...);\n</code></pre>"},{"location":"api/tool/#2-detailed-descriptions","title":"2. Detailed Descriptions","text":"<p>Write helpful descriptions for users and AI:</p> <pre><code>// \u2705 Good: Detailed description\nnew Tool('search_products', {\n  description: 'Search product catalog by name, category, or SKU. Returns product details including price, stock, and images.',\n  parameters: {...},\n  func: ...\n});\n\n// \u274c Bad: Vague description\nnew Tool('search_products', {\n  description: 'Search products',\n  parameters: {...},\n  func: ...\n});\n</code></pre>"},{"location":"api/tool/#3-parameter-documentation","title":"3. Parameter Documentation","text":"<p>Document each parameter clearly:</p> <pre><code>// \u2705 Good: Clear parameter descriptions\nparameters: {\n  query: 'Search query string (e.g., \"red shoes\")',\n  max_price: 'Maximum price in USD (optional, e.g., \"99.99\")',\n  category: 'Product category filter (optional, e.g., \"electronics\")'\n}\n\n// \u274c Bad: Minimal descriptions\nparameters: {\n  query: 'Query',\n  max_price: 'Price',\n  category: 'Category'\n}\n</code></pre>"},{"location":"api/tool/#4-return-structured-data","title":"4. Return Structured Data","text":"<p>Return JSON for complex data:</p> <pre><code>// \u2705 Good: Structured JSON response\nfunc: async ({ user_id }) =&gt; {\n  const user = await db.findUser(user_id);\n  return JSON.stringify({\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    created_at: user.created_at\n  });\n}\n\n// \u274c Bad: Unstructured string\nfunc: async ({ user_id }) =&gt; {\n  const user = await db.findUser(user_id);\n  return `User: ${user.name}, Email: ${user.email}`;\n}\n</code></pre>"},{"location":"api/tool/#5-async-for-io","title":"5. Async for I/O","text":"<p>Use async for operations involving I/O:</p> <pre><code>// \u2705 Good: Async for database/API calls\nconst db_tool = new Tool('query_db', {\n  description: 'Query database',\n  func: async ({ query }) =&gt; {\n    const results = await db.query(query);\n    return JSON.stringify(results);\n  }\n});\n\n// \u274c Bad: Sync with blocking operations\nconst bad_tool = new Tool('query_db', {\n  description: 'Query database',\n  func: ({ query }) =&gt; {\n    const results = db.querySync(query);  // Blocks event loop\n    return JSON.stringify(results);\n  }\n});\n</code></pre>"},{"location":"api/tool/#6-validate-inputs","title":"6. Validate Inputs","text":"<p>Validate and sanitize parameters:</p> <pre><code>const validated_tool = new Tool('update_user', {\n  description: 'Update user information',\n  parameters: {\n    user_id: 'User ID (numeric)',\n    email: 'New email address'\n  },\n  func: async ({ user_id, email }) =&gt; {\n    // Validate user_id\n    const id = parseInt(user_id);\n    if (isNaN(id) || id &lt;= 0) {\n      return 'Error: Invalid user ID';\n    }\n\n    // Validate email\n    if (!email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      return 'Error: Invalid email format';\n    }\n\n    // Process\n    await db.users.update(id, { email });\n    return 'User updated successfully';\n  }\n});\n</code></pre>"},{"location":"api/tool/#type-safety","title":"Type Safety","text":"<p>Tool supports TypeScript generics for parameter type safety:</p> <pre><code>import { Tool, ToolOptions } from '@arcaelas/agent';\n\n// Define parameter interface\ninterface SearchParams {\n  query: string;\n  limit: string;\n  category: string;\n}\n\n// Create typed tool\nconst search_tool = new Tool&lt;SearchParams&gt;('search', {\n  description: 'Search with typed parameters',\n  parameters: {\n    query: 'Search query',\n    limit: 'Max results',\n    category: 'Category filter'\n  },\n  func: ({ query, limit, category }) =&gt; {\n    // TypeScript knows the parameter types\n    const num_limit = parseInt(limit);\n    return database.search(query, num_limit, category);\n  }\n});\n\n// Type inference\nconst inferred = new Tool('inferred', {\n  description: 'Inferred params',\n  parameters: {\n    foo: 'Foo param',\n    bar: 'Bar param'\n  },\n  func: ({ foo, bar }) =&gt; {\n    // TypeScript infers foo and bar as strings\n    return `${foo} ${bar}`;\n  }\n});\n</code></pre>"},{"location":"api/tool/#testing-tools","title":"Testing Tools","text":"<p>Test tools independently:</p> <pre><code>import { Tool } from '@arcaelas/agent';\n\ndescribe('calculator_tool', () =&gt; {\n  const calculator = new Tool('calculate', {\n    description: 'Basic calculator',\n    parameters: {\n      operation: 'Math operation',\n      a: 'First number',\n      b: 'Second number'\n    },\n    func: ({ operation, a, b }) =&gt; {\n      const num_a = parseFloat(a);\n      const num_b = parseFloat(b);\n\n      switch (operation) {\n        case '+': return (num_a + num_b).toString();\n        case '-': return (num_a - num_b).toString();\n        default: return 'Invalid operation';\n      }\n    }\n  });\n\n  test('addition', () =&gt; {\n    const result = calculator.func({ operation: '+', a: '5', b: '3' });\n    expect(result).toBe('8');\n  });\n\n  test('subtraction', () =&gt; {\n    const result = calculator.func({ operation: '-', a: '10', b: '4' });\n    expect(result).toBe('6');\n  });\n\n  test('invalid operation', () =&gt; {\n    const result = calculator.func({ operation: '%', a: '5', b: '2' });\n    expect(result).toBe('Invalid operation');\n  });\n});\n</code></pre>"},{"location":"api/tool/#related","title":"Related","text":"<ul> <li>Context - Manages tools in hierarchical contexts</li> <li>Agent - Executes tools during conversations</li> <li>Built-in Tools - Pre-built RemoteTool and TimeTool</li> <li>Custom Tools Example - Practical implementations</li> </ul> <p>Next: Learn about Rule \u2192</p>"},{"location":"examples/advanced-patterns/","title":"Advanced Patterns","text":"<p>Complex multi-agent workflows and architectural patterns for production systems.</p>"},{"location":"examples/advanced-patterns/#agent-chaining","title":"Agent Chaining","text":"<p>Execute agents sequentially, passing results between them:</p> <pre><code>const research_agent = new Agent({\n  name: \"Researcher\",\n  description: \"Information gathering specialist\",\n  tools: [search_tool, scrape_tool],\n  providers: [openai_provider]\n});\n\nconst analyzer_agent = new Agent({\n  name: \"Analyzer\",\n  description: \"Data analysis specialist\",\n  tools: [stats_tool, chart_tool],\n  providers: [openai_provider]\n});\n\nconst writer_agent = new Agent({\n  name: \"Writer\",\n  description: \"Content writing specialist\",\n  tools: [grammar_tool, style_tool],\n  providers: [openai_provider]\n});\n\nasync function research_and_report(topic: string) {\n  // Step 1: Research\n  const [research_msgs, success1] = await research_agent.call(\n    `Research current trends about: ${topic}`\n  );\n\n  if (!success1) throw new Error(\"Research failed\");\n\n  // Step 2: Analyze\n  const research_data = research_msgs[research_msgs.length - 1].content;\n  const [analysis_msgs, success2] = await analyzer_agent.call(\n    `Analyze this research data and find key insights: ${research_data}`\n  );\n\n  if (!success2) throw new Error(\"Analysis failed\");\n\n  // Step 3: Write report\n  const analysis_data = analysis_msgs[analysis_msgs.length - 1].content;\n  const [report_msgs, success3] = await writer_agent.call(\n    `Write a comprehensive report based on this analysis: ${analysis_data}`\n  );\n\n  if (!success3) throw new Error(\"Writing failed\");\n\n  return report_msgs[report_msgs.length - 1].content;\n}\n\n// Usage\nconst report = await research_and_report(\"AI Agent Architectures\");\nconsole.log(report);\n</code></pre>"},{"location":"examples/advanced-patterns/#parallel-agent-execution","title":"Parallel Agent Execution","text":"<p>Run multiple agents concurrently for better performance:</p> <pre><code>async function parallel_analysis(text: string) {\n  const [sentiment_result, summary_result, keywords_result] = await Promise.allSettled([\n    sentiment_agent.call(`Analyze sentiment: ${text}`),\n    summary_agent.call(`Summarize: ${text}`),\n    keywords_agent.call(`Extract keywords: ${text}`)\n  ]);\n\n  return {\n    sentiment: sentiment_result.status === 'fulfilled'\n      ? sentiment_result.value[0]\n      : null,\n    summary: summary_result.status === 'fulfilled'\n      ? summary_result.value[0]\n      : null,\n    keywords: keywords_result.status === 'fulfilled'\n      ? keywords_result.value[0]\n      : null\n  };\n}\n</code></pre>"},{"location":"examples/advanced-patterns/#supervisor-pattern","title":"Supervisor Pattern","text":"<p>One agent coordinates multiple specialized agents:</p> <pre><code>const supervisor = new Agent({\n  name: \"Supervisor\",\n  description: \"Coordinates specialized agents for complex tasks\",\n  tools: [\n    new Tool('delegate_to_researcher', async ({ query }) =&gt; {\n      const [msgs, ok] = await research_agent.call(query);\n      return ok ? msgs[msgs.length - 1].content : \"Research failed\";\n    }),\n    new Tool('delegate_to_analyst', async ({ data }) =&gt; {\n      const [msgs, ok] = await analyzer_agent.call(data);\n      return ok ? msgs[msgs.length - 1].content : \"Analysis failed\";\n    }),\n    new Tool('delegate_to_writer', async ({ content }) =&gt; {\n      const [msgs, ok] = await writer_agent.call(content);\n      return ok ? msgs[msgs.length - 1].content : \"Writing failed\";\n    })\n  ],\n  providers: [openai_provider]\n});\n\n// Supervisor decides which agents to use and in what order\nconst [result, ok] = await supervisor.call(\n  \"Create a comprehensive report about quantum computing trends\"\n);\n</code></pre>"},{"location":"examples/advanced-patterns/#state-machine-pattern","title":"State Machine Pattern","text":"<p>Agent behavior based on conversation state:</p> <pre><code>type ConversationState = 'greeting' | 'gathering_info' | 'processing' | 'delivering_result' | 'closing';\n\nclass StatefulAgent {\n  private agent: Agent;\n  private state: ConversationState = 'greeting';\n\n  constructor() {\n    this.agent = new Agent({\n      name: \"Stateful_Agent\",\n      description: \"Agent with conversation state management\",\n      providers: [openai_provider]\n    });\n  }\n\n  async chat(message: string) {\n    // Update state based on message\n    if (message.toLowerCase().includes('bye')) {\n      this.state = 'closing';\n    } else if (this.state === 'greeting') {\n      this.state = 'gathering_info';\n    }\n\n    // Add state to context\n    this.agent.metadata.set('current_state', this.state);\n    this.agent.rules = [\n      new Rule(`Current conversation state: ${this.state}. Act accordingly.`)\n    ];\n\n    const [msgs, ok] = await this.agent.call(message);\n\n    // Transition to next state\n    if (this.state === 'gathering_info' &amp;&amp; ok) {\n      this.state = 'processing';\n    } else if (this.state === 'processing' &amp;&amp; ok) {\n      this.state = 'delivering_result';\n    }\n\n    return [msgs, ok];\n  }\n}\n\nconst stateful = new StatefulAgent();\nawait stateful.chat(\"Hello\");           // state: greeting \u2192 gathering_info\nawait stateful.chat(\"I need help with...\"); // state: gathering_info \u2192 processing\nawait stateful.chat(\"Thanks!\");         // state: processing \u2192 delivering_result\nawait stateful.chat(\"Goodbye\");         // state: closing\n</code></pre>"},{"location":"examples/advanced-patterns/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>Agents respond to events:</p> <pre><code>import { EventEmitter } from 'events';\n\nclass EventDrivenAgentSystem extends EventEmitter {\n  private agents: Map&lt;string, Agent&gt; = new Map();\n\n  register_agent(name: string, agent: Agent, events: string[]) {\n    this.agents.set(name, agent);\n    events.forEach(event =&gt; {\n      this.on(event, async (data) =&gt; {\n        console.log(`Agent ${name} handling event: ${event}`);\n        await agent.call(data.message);\n      });\n    });\n  }\n\n  async trigger(event: string, data: any) {\n    this.emit(event, data);\n  }\n}\n\n// Setup\nconst system = new EventDrivenAgentSystem();\n\nsystem.register_agent('monitor', monitoring_agent, ['user_action', 'system_alert']);\nsystem.register_agent('support', support_agent, ['user_question', 'error_report']);\nsystem.register_agent('logger', logging_agent, ['user_action', 'user_question', 'system_alert']);\n\n// Trigger events\nawait system.trigger('user_action', { message: 'User clicked button' });\nawait system.trigger('user_question', { message: 'How do I reset my password?' });\nawait system.trigger('system_alert', { message: 'High memory usage detected' });\n</code></pre>"},{"location":"examples/advanced-patterns/#tool-composition","title":"Tool Composition","text":"<p>Combine simple tools into complex workflows:</p> <pre><code>const fetch_tool = new Tool('fetch_url', async ({ url }) =&gt; {\n  const response = await fetch(url);\n  return await response.text();\n});\n\nconst parse_tool = new Tool('parse_html', async ({ html }) =&gt; {\n  // Parse HTML and extract structured data\n  return JSON.stringify({ title: \"...\", content: \"...\" });\n});\n\nconst summarize_tool = new Tool('summarize_text', async ({ text }) =&gt; {\n  // Use another agent for summarization\n  const [msgs, ok] = await summary_agent.call(`Summarize: ${text}`);\n  return ok ? msgs[msgs.length - 1].content : \"Failed to summarize\";\n});\n\n// Complex tool that combines others\nconst web_research_tool = new Tool('research_url', async ({ url }) =&gt; {\n  // Fetch \u2192 Parse \u2192 Summarize\n  const html = await fetch_tool.func({ url });\n  const data = await parse_tool.func({ html });\n  const summary = await summarize_tool.func({ text: data });\n  return summary;\n});\n\nconst research_agent = new Agent({\n  name: \"Web_Researcher\",\n  description: \"Researches and summarizes web content\",\n  tools: [web_research_tool],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"examples/advanced-patterns/#memory-and-persistence","title":"Memory and Persistence","text":"<p>Maintain long-term conversation memory:</p> <pre><code>interface ConversationMemory {\n  user_id: string;\n  messages: Message[];\n  metadata: Record&lt;string, any&gt;;\n  created_at: Date;\n  updated_at: Date;\n}\n\nclass PersistentAgent {\n  private agent: Agent;\n  private db: Database; // Your database interface\n\n  constructor(db: Database) {\n    this.db = db;\n    this.agent = new Agent({\n      name: \"Persistent_Agent\",\n      description: \"Agent with conversation persistence\",\n      providers: [openai_provider]\n    });\n  }\n\n  async chat(user_id: string, message: string) {\n    // Load conversation history\n    const memory = await this.db.get_conversation(user_id);\n\n    if (memory) {\n      // Restore previous messages\n      this.agent.messages = memory.messages;\n      // Restore metadata\n      Object.entries(memory.metadata).forEach(([k, v]) =&gt; {\n        this.agent.metadata.set(k, v);\n      });\n    }\n\n    // Process new message\n    const [msgs, ok] = await this.agent.call(message);\n\n    // Save updated conversation\n    await this.db.save_conversation({\n      user_id,\n      messages: msgs,\n      metadata: this.agent.metadata.toJSON(),\n      created_at: memory?.created_at || new Date(),\n      updated_at: new Date()\n    });\n\n    return [msgs, ok];\n  }\n}\n</code></pre>"},{"location":"examples/advanced-patterns/#rate-limiting-and-throttling","title":"Rate Limiting and Throttling","text":"<p>Control request frequency:</p> <pre><code>class ThrottledProvider {\n  private last_call: number = 0;\n  private min_interval: number = 1000; // 1 second between calls\n\n  async provider(ctx: Context): Promise&lt;ChatCompletionResponse&gt; {\n    const now = Date.now();\n    const elapsed = now - this.last_call;\n\n    if (elapsed &lt; this.min_interval) {\n      await new Promise(resolve =&gt;\n        setTimeout(resolve, this.min_interval - elapsed)\n      );\n    }\n\n    this.last_call = Date.now();\n\n    return await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: ctx.messages.map(m =&gt; ({ role: m.role, content: m.content }))\n    });\n  }\n}\n\nconst throttled = new ThrottledProvider();\nconst agent = new Agent({\n  name: \"Rate_Limited_Agent\",\n  description: \"Agent with rate limiting\",\n  providers: [throttled.provider.bind(throttled)]\n});\n</code></pre>"},{"location":"examples/advanced-patterns/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<p>Prevent cascading failures:</p> <pre><code>class CircuitBreaker {\n  private failures: number = 0;\n  private last_failure: number = 0;\n  private readonly threshold: number = 3;\n  private readonly timeout: number = 60000; // 1 minute\n  private state: 'closed' | 'open' | 'half-open' = 'closed';\n\n  async call_provider(provider: Provider, ctx: Context): Promise&lt;ChatCompletionResponse | null&gt; {\n    // Check circuit state\n    if (this.state === 'open') {\n      if (Date.now() - this.last_failure &gt; this.timeout) {\n        this.state = 'half-open';\n      } else {\n        throw new Error('Circuit breaker is OPEN');\n      }\n    }\n\n    try {\n      const response = await provider(ctx);\n\n      // Success - reset if in half-open\n      if (this.state === 'half-open') {\n        this.state = 'closed';\n        this.failures = 0;\n      }\n\n      return response;\n    } catch (error) {\n      this.failures++;\n      this.last_failure = Date.now();\n\n      if (this.failures &gt;= this.threshold) {\n        this.state = 'open';\n        console.log('Circuit breaker opened due to repeated failures');\n      }\n\n      throw error;\n    }\n  }\n}\n\nconst breaker = new CircuitBreaker();\nconst protected_provider: Provider = async (ctx) =&gt; {\n  return await breaker.call_provider(openai_provider, ctx);\n};\n</code></pre>"},{"location":"examples/advanced-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Error Boundaries - Isolate failures to prevent system-wide crashes</li> <li>Idempotency - Ensure operations can be safely retried</li> <li>Observability - Log all agent interactions for debugging</li> <li>Resource Limits - Set timeouts and max retries</li> <li>Graceful Degradation - Provide fallback responses</li> <li>Testing - Unit test each agent and integration test workflows</li> </ol>"},{"location":"examples/advanced-patterns/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Best Practices - Production guidelines</li> <li>Architecture - System design patterns</li> </ul> <p>\u2190 Back to Examples</p>"},{"location":"examples/basic-agent/","title":"Basic Agent Example","text":"<p>This example demonstrates how to create a simple conversational AI agent with @arcaelas/agent.</p>"},{"location":"examples/basic-agent/#overview","title":"Overview","text":"<p>A basic agent is the simplest form of an AI-powered assistant. It combines:</p> <ul> <li>A single AI provider (OpenAI in this case)</li> <li>Simple conversation management</li> <li>No custom tools or complex rules</li> </ul>"},{"location":"examples/basic-agent/#complete-example","title":"Complete Example","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: \"https://api.openai.com/v1\"\n});\n\n// Create provider function\nconst openai_provider = async (agent) =&gt; {\n  return await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: agent.messages.map(msg =&gt; ({\n      role: msg.role,\n      content: msg.content\n    }))\n  });\n};\n\n// Create basic agent\nconst chatbot = new Agent({\n  name: \"Simple_Chatbot\",\n  description: \"A friendly conversational assistant\",\n  providers: [openai_provider]\n});\n\n// Start conversation\nasync function chat() {\n  // First message\n  const [messages1, success1] = await chatbot.call(\"Hello! What's your name?\");\n\n  if (success1) {\n    console.log(\"User:\", \"Hello! What's your name?\");\n    console.log(\"Bot:\", messages1[messages1.length - 1].content);\n  }\n\n  // Follow-up message\n  const [messages2, success2] = await chatbot.call(\"Can you help me with programming questions?\");\n\n  if (success2) {\n    console.log(\"User:\", \"Can you help me with programming questions?\");\n    console.log(\"Bot:\", messages2[messages2.length - 1].content);\n  }\n}\n\nchat();\n</code></pre>"},{"location":"examples/basic-agent/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"examples/basic-agent/#1-import-dependencies","title":"1. Import Dependencies","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n</code></pre>"},{"location":"examples/basic-agent/#2-configure-ai-provider","title":"2. Configure AI Provider","text":"<pre><code>const openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: \"https://api.openai.com/v1\"\n});\n</code></pre> <p>Best Practice: Always use environment variables for API keys.</p>"},{"location":"examples/basic-agent/#3-create-provider-function","title":"3. Create Provider Function","text":"<pre><code>const openai_provider = async (agent) =&gt; {\n  return await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: agent.messages.map(msg =&gt; ({\n      role: msg.role,\n      content: msg.content\n    }))\n  });\n};\n</code></pre> <p>The provider function receives the full agent context and returns an OpenAI-compatible response.</p>"},{"location":"examples/basic-agent/#4-initialize-agent","title":"4. Initialize Agent","text":"<pre><code>const chatbot = new Agent({\n  name: \"Simple_Chatbot\",\n  description: \"A friendly conversational assistant\",\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"examples/basic-agent/#5-send-messages","title":"5. Send Messages","text":"<pre><code>const [messages, success] = await chatbot.call(\"Hello!\");\n</code></pre> <p>The <code>call()</code> method returns: - <code>messages</code>: Full conversation history - <code>success</code>: Boolean indicating if the call succeeded</p>"},{"location":"examples/basic-agent/#running-the-example","title":"Running the Example","text":"<ol> <li>Install dependencies:</li> </ol> <pre><code>npm install @arcaelas/agent openai\n</code></pre> <ol> <li>Set environment variable:</li> </ol> <pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre> <ol> <li>Run the script:</li> </ol> <pre><code>node basic-agent.js\n</code></pre>"},{"location":"examples/basic-agent/#expected-output","title":"Expected Output","text":"<pre><code>User: Hello! What's your name?\nBot: Hello! I'm a friendly conversational assistant. How can I help you today?\n\nUser: Can you help me with programming questions?\nBot: Absolutely! I'd be happy to help with programming questions...\n</code></pre>"},{"location":"examples/basic-agent/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/basic-agent/#conversation-history","title":"Conversation History","text":"<p>The agent automatically maintains conversation history across multiple <code>call()</code> invocations:</p> <pre><code>await chatbot.call(\"What's the capital of France?\");\n// Bot remembers: \"Paris\"\n\nawait chatbot.call(\"What's the population?\");\n// Bot knows you're asking about Paris\n</code></pre>"},{"location":"examples/basic-agent/#error-handling","title":"Error Handling","text":"<p>Always check the <code>success</code> flag:</p> <pre><code>const [messages, success] = await chatbot.call(\"Hello\");\n\nif (!success) {\n  console.error(\"Failed to get response\");\n  return;\n}\n\nconst response = messages[messages.length - 1].content;\nconsole.log(response);\n</code></pre>"},{"location":"examples/basic-agent/#customization","title":"Customization","text":""},{"location":"examples/basic-agent/#change-model","title":"Change Model","text":"<pre><code>const openai_provider = async (agent) =&gt; {\n  return await openai.chat.completions.create({\n    model: \"gpt-3.5-turbo\",  // Faster, cheaper\n    messages: agent.messages.map(msg =&gt; ({\n      role: msg.role,\n      content: msg.content\n    }))\n  });\n};\n</code></pre>"},{"location":"examples/basic-agent/#add-system-instructions","title":"Add System Instructions","text":"<pre><code>import { Message } from '@arcaelas/agent';\n\nconst chatbot = new Agent({\n  name: \"Simple_Chatbot\",\n  description: \"A friendly conversational assistant\",\n  messages: [\n    new Message({\n      role: \"system\",\n      content: \"You are a helpful assistant that speaks like a pirate.\"\n    })\n  ],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"examples/basic-agent/#next-steps","title":"Next Steps","text":"<ul> <li>Multi-Provider Setup - Add resilience with automatic failover</li> <li>Custom Tools - Give your agent superpowers</li> <li>Context Inheritance - Build scalable agent systems</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"examples/context-inheritance/","title":"Context Inheritance Example","text":"<p>This example demonstrates hierarchical context management with automatic inheritance for enterprise-scale agent systems.</p>"},{"location":"examples/context-inheritance/#overview","title":"Overview","text":"<p>Context inheritance allows you to: - Share configuration across multiple agents - Create organizational hierarchies (company \u2192 department \u2192 team) - Override inherited values when needed - Maintain consistency while allowing customization</p>"},{"location":"examples/context-inheritance/#basic-inheritance","title":"Basic Inheritance","text":"<pre><code>import { Agent, Context, Metadata, Rule, Tool } from '@arcaelas/agent';\n\n// Parent context - company-wide settings\nconst company_context = new Context({\n  metadata: new Metadata()\n    .set(\"organization\", \"Acme Corp\")\n    .set(\"api_version\", \"v2\"),\n  rules: [\n    new Rule(\"Always maintain professional tone\"),\n    new Rule(\"Protect customer privacy\")\n  ]\n});\n\n// Child context - inherits from parent\nconst sales_context = new Context({\n  context: company_context,  // Inheritance\n  metadata: new Metadata()\n    .set(\"department\", \"Sales\")\n    .set(\"region\", \"EMEA\"),\n  rules: [\n    new Rule(\"Focus on customer value proposition\")\n  ]\n});\n\n// Agent using child context\nconst sales_agent = new Agent({\n  name: \"Sales_Agent\",\n  description: \"EMEA sales specialist\",\n  contexts: sales_context,\n  providers: [openai_provider]\n});\n\n// Agent has access to all inherited data:\nconsole.log(sales_agent.metadata.get(\"organization\")); // \"Acme Corp\" (inherited)\nconsole.log(sales_agent.metadata.get(\"department\"));    // \"Sales\" (local)\nconsole.log(sales_agent.rules.length);                  // 3 (2 inherited + 1 local)\n</code></pre>"},{"location":"examples/context-inheritance/#multi-level-inheritance","title":"Multi-Level Inheritance","text":"<pre><code>// Level 1: Global\nconst global_context = new Context({\n  metadata: new Metadata()\n    .set(\"company\", \"TechCorp\")\n    .set(\"compliance_level\", \"high\"),\n  rules: [new Rule(\"Follow data protection regulations\")]\n});\n\n// Level 2: Department\nconst engineering_context = new Context({\n  context: global_context,\n  metadata: new Metadata()\n    .set(\"department\", \"Engineering\")\n    .set(\"tech_stack\", \"TypeScript\"),\n  tools: [github_tool, jira_tool]\n});\n\n// Level 3: Team\nconst backend_team_context = new Context({\n  context: engineering_context,\n  metadata: new Metadata()\n    .set(\"team\", \"Backend\")\n    .set(\"primary_language\", \"Go\"),\n  tools: [database_tool, api_tool]\n});\n\n// Agent at deepest level\nconst backend_agent = new Agent({\n  name: \"Backend_Engineer_Agent\",\n  description: \"Backend engineering specialist\",\n  contexts: backend_team_context,\n  providers: [openai_provider]\n});\n\n// Has access to all levels:\nconsole.log(backend_agent.metadata.get(\"company\"));      // \"TechCorp\" (level 1)\nconsole.log(backend_agent.metadata.get(\"department\"));   // \"Engineering\" (level 2)\nconsole.log(backend_agent.metadata.get(\"team\"));         // \"Backend\" (level 3)\nconsole.log(backend_agent.tools.length);                 // 4 (2 from level 2 + 2 from level 3)\n</code></pre>"},{"location":"examples/context-inheritance/#overriding-inherited-values","title":"Overriding Inherited Values","text":"<pre><code>const parent = new Context({\n  metadata: new Metadata()\n    .set(\"theme\", \"light\")\n    .set(\"timeout\", \"30000\")\n});\n\nconst child = new Context({\n  context: parent,\n  metadata: new Metadata()\n    .set(\"theme\", \"dark\")  // Override parent value\n});\n\nconst agent = new Agent({\n  name: \"Custom_Agent\",\n  description: \"Agent with overridden theme\",\n  contexts: child,\n  providers: [openai_provider]\n});\n\nconsole.log(agent.metadata.get(\"theme\"));    // \"dark\" (overridden)\nconsole.log(agent.metadata.get(\"timeout\"));  // \"30000\" (inherited)\n</code></pre>"},{"location":"examples/context-inheritance/#tool-deduplication","title":"Tool Deduplication","text":"<p>Tools with the same name are automatically deduplicated, with local tools taking precedence:</p> <pre><code>const parent_tools = [\n  new Tool('search', () =&gt; \"Parent search implementation\")\n];\n\nconst child_tools = [\n  new Tool('search', () =&gt; \"Child search implementation (enhanced)\"),\n  new Tool('analyze', () =&gt; \"Analysis tool\")\n];\n\nconst parent_ctx = new Context({ tools: parent_tools });\nconst child_ctx = new Context({\n  context: parent_ctx,\n  tools: child_tools\n});\n\nconst agent = new Agent({\n  name: \"Tool_Agent\",\n  description: \"Agent with deduplicated tools\",\n  contexts: child_ctx,\n  providers: [openai_provider]\n});\n\nconsole.log(agent.tools.length); // 2 (search from child, analyze from child)\n// 'search' from parent is replaced by child's version\n</code></pre>"},{"location":"examples/context-inheritance/#enterprise-pattern","title":"Enterprise Pattern","text":"<p>Complete organizational structure:</p> <pre><code>// Global company context\nconst acme_global = new Context({\n  metadata: new Metadata()\n    .set(\"company_name\", \"Acme Corporation\")\n    .set(\"founded\", \"1950\")\n    .set(\"compliance\", \"SOC2,ISO27001\"),\n  rules: [\n    new Rule(\"Maintain confidentiality of customer data\"),\n    new Rule(\"Follow industry best practices\")\n  ],\n  tools: [logging_tool, analytics_tool]\n});\n\n// Regional contexts\nconst acme_emea = new Context({\n  context: acme_global,\n  metadata: new Metadata()\n    .set(\"region\", \"EMEA\")\n    .set(\"gdpr_compliant\", \"true\"),\n  rules: [new Rule(\"Apply GDPR data protection standards\")]\n});\n\nconst acme_americas = new Context({\n  context: acme_global,\n  metadata: new Metadata()\n    .set(\"region\", \"Americas\")\n    .set(\"timezone\", \"EST\"),\n  rules: [new Rule(\"Apply US data protection standards\")]\n});\n\n// Department contexts\nconst emea_sales = new Context({\n  context: acme_emea,\n  metadata: new Metadata()\n    .set(\"department\", \"Sales\"),\n  tools: [crm_tool, email_tool]\n});\n\nconst emea_support = new Context({\n  context: acme_emea,\n  metadata: new Metadata()\n    .set(\"department\", \"Support\"),\n  tools: [ticketing_tool, knowledge_base_tool]\n});\n\n// Create specialized agents\nconst sales_agent_uk = new Agent({\n  name: \"UK_Sales_Agent\",\n  description: \"Sales agent for UK market\",\n  contexts: emea_sales,\n  metadata: new Metadata().set(\"country\", \"UK\"),\n  providers: [openai_provider]\n});\n\nconst support_agent_germany = new Agent({\n  name: \"Germany_Support_Agent\",\n  description: \"Support agent for German customers\",\n  contexts: emea_support,\n  metadata: new Metadata().set(\"country\", \"Germany\").set(\"language\", \"de\"),\n  providers: [openai_provider]\n});\n\n// Both agents inherit:\n// - Company-level config and rules\n// - Regional GDPR compliance\n// - Department-specific tools\n// Plus their own country-specific metadata\n</code></pre>"},{"location":"examples/context-inheritance/#dynamic-context-creation","title":"Dynamic Context Creation","text":"<p>Create contexts dynamically based on user data:</p> <pre><code>function create_user_context(user_profile) {\n  const base_context = new Context({\n    metadata: new Metadata()\n      .set(\"app_name\", \"MyApp\")\n      .set(\"version\", \"1.0\"),\n    rules: [new Rule(\"Be helpful and concise\")]\n  });\n\n  return new Context({\n    context: base_context,\n    metadata: new Metadata()\n      .set(\"user_id\", user_profile.id)\n      .set(\"user_name\", user_profile.name)\n      .set(\"subscription\", user_profile.plan)\n      .set(\"preferences\", JSON.stringify(user_profile.preferences))\n  });\n}\n\n// Create per-user agents\nfunction create_personalized_agent(user_profile) {\n  const user_context = create_user_context(user_profile);\n\n  return new Agent({\n    name: `Agent_${user_profile.id}`,\n    description: `Personalized agent for ${user_profile.name}`,\n    contexts: user_context,\n    providers: [openai_provider]\n  });\n}\n\n// Usage\nconst user = { id: \"123\", name: \"John\", plan: \"premium\", preferences: {...} };\nconst agent = create_personalized_agent(user);\n</code></pre>"},{"location":"examples/context-inheritance/#best-practices","title":"Best Practices","text":""},{"location":"examples/context-inheritance/#1-layer-contexts-by-scope","title":"1. Layer Contexts by Scope","text":"<pre><code>// \u2705 Good: Clear hierarchy\nglobal_ctx \u2192 regional_ctx \u2192 department_ctx \u2192 team_ctx\n\n// \u274c Bad: Flat structure\nindividual_context_for_each_agent\n</code></pre>"},{"location":"examples/context-inheritance/#2-use-meaningful-metadata-keys","title":"2. Use Meaningful Metadata Keys","text":"<pre><code>// \u2705 Good: Descriptive keys\nmetadata.set(\"user_subscription_tier\", \"premium\")\nmetadata.set(\"feature_flags\", JSON.stringify({...}))\n\n// \u274c Bad: Vague keys\nmetadata.set(\"tier\", \"p\")\nmetadata.set(\"flags\", \"...\")\n</code></pre>"},{"location":"examples/context-inheritance/#3-document-inheritance-chain","title":"3. Document Inheritance Chain","text":"<pre><code>/**\n * Inheritance: global_ctx \u2192 region_ctx \u2192 dept_ctx\n * - global_ctx: Company-wide settings\n * - region_ctx: Regional compliance &amp; timezone\n * - dept_ctx: Department-specific tools\n */\nconst dept_ctx = new Context({\n  context: region_ctx,\n  ...\n});\n</code></pre>"},{"location":"examples/context-inheritance/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Patterns - Complex multi-agent workflows</li> <li>API Reference: Context - Complete Context API</li> <li>API Reference: Metadata - Metadata broker pattern</li> </ul> <p>\u2190 Back to Examples</p>"},{"location":"examples/custom-tools/","title":"Custom Tools Example","text":"<p>This example demonstrates how to create custom tools for your agents, from simple functions to advanced tools with parameter validation.</p>"},{"location":"examples/custom-tools/#overview","title":"Overview","text":"<p>Tools extend agent capabilities by providing access to external data, APIs, and custom logic. The @arcaelas/agent library supports two types of tools:</p> <ul> <li>Simple Tools - Basic function with string input</li> <li>Advanced Tools - Complex functions with typed parameters and descriptions</li> </ul>"},{"location":"examples/custom-tools/#simple-tool-example","title":"Simple Tool Example","text":""},{"location":"examples/custom-tools/#basic-weather-tool","title":"Basic Weather Tool","text":"<pre><code>import { Agent, Tool } from '@arcaelas/agent';\n\n// Simple tool with string input\nconst weather_tool = new Tool('get_weather', (input: string) =&gt; {\n  // input contains the natural language request\n  // In production, you would call a real weather API\n  return `Weather for ${input}: Sunny, 24\u00b0C`;\n});\n\nconst agent = new Agent({\n  name: \"Weather_Agent\",\n  description: \"Helpful weather assistant\",\n  tools: [weather_tool],\n  providers: [openai_provider]\n});\n\n// Agent will automatically call the tool when needed\nconst [messages, success] = await agent.call(\"What's the weather in Madrid?\");\n// Agent calls weather_tool automatically\n// Returns: \"Weather for Madrid: Sunny, 24\u00b0C\"\n</code></pre>"},{"location":"examples/custom-tools/#timestamp-tool","title":"Timestamp Tool","text":"<pre><code>const timestamp_tool = new Tool('get_current_time', () =&gt; {\n  return new Date().toISOString();\n});\n</code></pre>"},{"location":"examples/custom-tools/#random-number-tool","title":"Random Number Tool","text":"<pre><code>const random_tool = new Tool('generate_random', (input: string) =&gt; {\n  const max = parseInt(input) || 100;\n  return Math.floor(Math.random() * max).toString();\n});\n</code></pre>"},{"location":"examples/custom-tools/#advanced-tool-example","title":"Advanced Tool Example","text":""},{"location":"examples/custom-tools/#database-search-tool","title":"Database Search Tool","text":"<pre><code>import { Tool } from '@arcaelas/agent';\n\nconst search_customers = new Tool('search_customers', {\n  description: 'Search customers in database by various criteria',\n  parameters: {\n    query: 'Search query string',\n    limit: 'Maximum number of results (default: 10)',\n    status: 'Filter by customer status: active, inactive, or all'\n  },\n  func: async ({ query, limit, status }) =&gt; {\n    // Parse parameters\n    const max_results = limit ? parseInt(limit) : 10;\n    const filter_status = status || 'all';\n\n    // Query database (example)\n    const results = await database.customers.find({\n      $text: { $search: query },\n      ...(filter_status !== 'all' &amp;&amp; { status: filter_status })\n    }).limit(max_results);\n\n    return JSON.stringify(results);\n  }\n});\n</code></pre>"},{"location":"examples/custom-tools/#api-integration-tool","title":"API Integration Tool","text":"<pre><code>const github_search = new Tool('search_github_repos', {\n  description: 'Search GitHub repositories by keywords and filters',\n  parameters: {\n    query: 'Search keywords',\n    language: 'Programming language filter (optional)',\n    sort: 'Sort by: stars, forks, or updated (default: stars)',\n    order: 'Order: asc or desc (default: desc)'\n  },\n  func: async ({ query, language, sort, order }) =&gt; {\n    const search_params = new URLSearchParams({\n      q: language ? `${query} language:${language}` : query,\n      sort: sort || 'stars',\n      order: order || 'desc'\n    });\n\n    const response = await fetch(\n      `https://api.github.com/search/repositories?${search_params}`\n    );\n\n    const data = await response.json();\n\n    return JSON.stringify({\n      total: data.total_count,\n      repositories: data.items.slice(0, 5).map(repo =&gt; ({\n        name: repo.full_name,\n        stars: repo.stargazers_count,\n        description: repo.description,\n        url: repo.html_url\n      }))\n    });\n  }\n});\n</code></pre>"},{"location":"examples/custom-tools/#calculator-tool","title":"Calculator Tool","text":"<pre><code>const calculator = new Tool('calculate', {\n  description: 'Perform mathematical calculations',\n  parameters: {\n    operation: 'Mathematical operation: add, subtract, multiply, divide, power, sqrt',\n    a: 'First number',\n    b: 'Second number (not required for sqrt)'\n  },\n  func: ({ operation, a, b }) =&gt; {\n    const num_a = parseFloat(a);\n    const num_b = b ? parseFloat(b) : 0;\n\n    switch (operation.toLowerCase()) {\n      case 'add':\n        return (num_a + num_b).toString();\n      case 'subtract':\n        return (num_a - num_b).toString();\n      case 'multiply':\n        return (num_a * num_b).toString();\n      case 'divide':\n        if (num_b === 0) return 'Error: Division by zero';\n        return (num_a / num_b).toString();\n      case 'power':\n        return Math.pow(num_a, num_b).toString();\n      case 'sqrt':\n        if (num_a &lt; 0) return 'Error: Square root of negative number';\n        return Math.sqrt(num_a).toString();\n      default:\n        return 'Error: Unknown operation';\n    }\n  }\n});\n</code></pre>"},{"location":"examples/custom-tools/#complete-agent-with-custom-tools","title":"Complete Agent with Custom Tools","text":"<pre><code>import { Agent, Tool } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// Define custom tools\nconst weather_tool = new Tool('get_weather', {\n  description: 'Get current weather for any city',\n  parameters: {\n    city: 'City name',\n    units: 'Temperature units: celsius or fahrenheit (default: celsius)'\n  },\n  func: async ({ city, units }) =&gt; {\n    const unit_system = units === 'fahrenheit' ? 'imperial' : 'metric';\n\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&amp;units=${unit_system}&amp;appid=${process.env.WEATHER_API_KEY}`\n    );\n\n    const data = await response.json();\n\n    return JSON.stringify({\n      city: data.name,\n      temperature: data.main.temp,\n      feels_like: data.main.feels_like,\n      description: data.weather[0].description,\n      humidity: data.main.humidity,\n      wind_speed: data.wind.speed,\n      units: unit_system === 'metric' ? '\u00b0C' : '\u00b0F'\n    });\n  }\n});\n\nconst news_tool = new Tool('get_latest_news', {\n  description: 'Get latest news articles by topic',\n  parameters: {\n    topic: 'News topic or category',\n    count: 'Number of articles to return (default: 5)'\n  },\n  func: async ({ topic, count }) =&gt; {\n    const max_results = count ? parseInt(count) : 5;\n\n    const response = await fetch(\n      `https://newsapi.org/v2/everything?q=${topic}&amp;pageSize=${max_results}&amp;apiKey=${process.env.NEWS_API_KEY}`\n    );\n\n    const data = await response.json();\n\n    return JSON.stringify(\n      data.articles.map(article =&gt; ({\n        title: article.title,\n        description: article.description,\n        url: article.url,\n        published: article.publishedAt\n      }))\n    );\n  }\n});\n\n// Create OpenAI provider with tool support\nconst openai_provider = async (ctx) =&gt; {\n  return await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: ctx.messages.map(m =&gt; ({\n      role: m.role === 'tool' ? 'tool' : m.role,\n      content: m.content || '',\n      ...(m.role === 'tool' &amp;&amp; { tool_call_id: m.tool_id })\n    })),\n    tools: ctx.tools.map(tool =&gt; ({\n      type: \"function\",\n      function: {\n        name: tool.name,\n        description: tool.description,\n        parameters: {\n          type: \"object\",\n          properties: Object.entries(tool.parameters).reduce(\n            (acc, [key, desc]) =&gt; ({\n              ...acc,\n              [key]: {\n                type: \"string\",\n                description: desc\n              }\n            }),\n            {}\n          ),\n          required: Object.keys(tool.parameters)\n        }\n      }\n    }))\n  });\n};\n\n// Create agent with custom tools\nconst assistant = new Agent({\n  name: \"Multi_Tool_Assistant\",\n  description: \"Helpful assistant with weather and news capabilities\",\n  tools: [weather_tool, news_tool],\n  providers: [openai_provider]\n});\n\n// Usage\nasync function demo() {\n  // Weather request\n  const [weather_response, success1] = await assistant.call(\n    \"What's the weather like in Tokyo?\"\n  );\n\n  if (success1) {\n    console.log(weather_response[weather_response.length - 1].content);\n  }\n\n  // News request\n  const [news_response, success2] = await assistant.call(\n    \"Show me the latest news about artificial intelligence\"\n  );\n\n  if (success2) {\n    console.log(news_response[news_response.length - 1].content);\n  }\n}\n\ndemo();\n</code></pre>"},{"location":"examples/custom-tools/#tool-execution-flow","title":"Tool Execution Flow","text":"<p>When an agent receives a prompt:</p> <ol> <li>Provider Call - Agent sends prompt to AI provider with tool definitions</li> <li>Tool Decision - AI decides whether to use tools and which ones</li> <li>Tool Execution - Agent executes requested tools in parallel</li> <li>Result Processing - Tool results are added to conversation</li> <li>Final Response - AI processes tool results and responds to user</li> </ol> <pre><code>User: \"What's the weather in Paris and latest tech news?\"\n   \u2502\n   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Agent receives      \u2502\n\u2502 prompt              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Provider decides:   \u2502\n\u2502 - Use weather_tool  \u2502\n\u2502 - Use news_tool     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Execute tools in    \u2502\n\u2502 parallel:           \u2502\n\u2502 \u2713 weather_tool      \u2502\n\u2502 \u2713 news_tool         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Provider processes  \u2502\n\u2502 results and         \u2502\n\u2502 generates response  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\nUser: \"Paris: Sunny, 22\u00b0C. Latest tech news: [articles]\"\n</code></pre>"},{"location":"examples/custom-tools/#tool-best-practices","title":"Tool Best Practices","text":""},{"location":"examples/custom-tools/#1-clear-descriptions","title":"1. Clear Descriptions","text":"<pre><code>// \u2705 Good: Clear, specific description\nconst good_tool = new Tool('search_products', {\n  description: 'Search e-commerce product catalog by name, category, or SKU',\n  parameters: { ... }\n});\n\n// \u274c Bad: Vague description\nconst bad_tool = new Tool('search', {\n  description: 'Search stuff',\n  parameters: { ... }\n});\n</code></pre>"},{"location":"examples/custom-tools/#2-detailed-parameters","title":"2. Detailed Parameters","text":"<pre><code>// \u2705 Good: Descriptive parameter names and descriptions\nparameters: {\n  start_date: 'Start date in ISO 8601 format (e.g., 2024-01-01)',\n  end_date: 'End date in ISO 8601 format (e.g., 2024-12-31)',\n  include_weekends: 'Include weekends in results: true or false (default: true)'\n}\n\n// \u274c Bad: Unclear parameters\nparameters: {\n  date1: 'date',\n  date2: 'date',\n  flag: 'option'\n}\n</code></pre>"},{"location":"examples/custom-tools/#3-error-handling","title":"3. Error Handling","text":"<pre><code>const robust_tool = new Tool('fetch_data', {\n  description: 'Fetch data from external API',\n  parameters: {\n    endpoint: 'API endpoint path',\n    method: 'HTTP method: GET or POST'\n  },\n  func: async ({ endpoint, method }) =&gt; {\n    try {\n      const response = await fetch(`https://api.example.com/${endpoint}`, {\n        method: method.toUpperCase()\n      });\n\n      if (!response.ok) {\n        return JSON.stringify({\n          error: true,\n          message: `HTTP ${response.status}: ${response.statusText}`\n        });\n      }\n\n      const data = await response.json();\n      return JSON.stringify({ error: false, data });\n\n    } catch (error) {\n      return JSON.stringify({\n        error: true,\n        message: error.message\n      });\n    }\n  }\n});\n</code></pre>"},{"location":"examples/custom-tools/#4-return-json-for-complex-data","title":"4. Return JSON for Complex Data","text":"<pre><code>// \u2705 Good: Structured JSON response\nfunc: async ({ query }) =&gt; {\n  const results = await search(query);\n  return JSON.stringify({\n    total: results.length,\n    items: results,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// \u274c Bad: Unstructured string\nfunc: async ({ query }) =&gt; {\n  const results = await search(query);\n  return `Found ${results.length} results: ${results.join(', ')}`;\n}\n</code></pre>"},{"location":"examples/custom-tools/#5-async-operations","title":"5. Async Operations","text":"<pre><code>// \u2705 Good: Proper async/await\nfunc: async ({ url }) =&gt; {\n  const response = await fetch(url);\n  const data = await response.json();\n  return JSON.stringify(data);\n}\n\n// \u274c Bad: Unhandled promises\nfunc: ({ url }) =&gt; {\n  fetch(url).then(r =&gt; r.json()).then(d =&gt; JSON.stringify(d));\n  // Returns undefined!\n}\n</code></pre>"},{"location":"examples/custom-tools/#tool-testing","title":"Tool Testing","text":"<p>Test tools independently:</p> <pre><code>// Create tool\nconst test_tool = new Tool('my_tool', {\n  description: 'Test tool',\n  parameters: {\n    input: 'Test input'\n  },\n  func: async ({ input }) =&gt; {\n    return `Processed: ${input}`;\n  }\n});\n\n// Test tool function directly\nconst result = await test_tool.func({ input: 'test value' });\nconsole.log(result); // \"Processed: test value\"\n\n// Verify tool metadata\nconsole.log(test_tool.name);        // \"my_tool\"\nconsole.log(test_tool.description); // \"Test tool\"\nconsole.log(test_tool.parameters);  // { input: 'Test input' }\n</code></pre>"},{"location":"examples/custom-tools/#built-in-tools","title":"Built-in Tools","text":"<p>The library provides built-in tools:</p>"},{"location":"examples/custom-tools/#remotetool","title":"RemoteTool","text":"<p>HTTP requests with various methods:</p> <pre><code>import { RemoteTool } from '@arcaelas/agent';\n\nconst http_tool = new RemoteTool();\n\n// Use in agent\nconst agent = new Agent({\n  tools: [http_tool],\n  // ...\n});\n\n// Agent can now make HTTP requests automatically\nawait agent.call(\"Fetch data from https://api.example.com/users\");\n</code></pre>"},{"location":"examples/custom-tools/#timetool","title":"TimeTool","text":"<p>Timezone and date operations:</p> <pre><code>import { TimeTool } from '@arcaelas/agent';\n\nconst time_tool = new TimeTool();\n\n// Agent can now handle timezone conversions and date queries\n</code></pre> <p>Learn more about built-in tools \u2192</p>"},{"location":"examples/custom-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Context Inheritance - Share tools across agents</li> <li>Advanced Patterns - Complex tool orchestration</li> <li>API Reference: Tool - Complete Tool API</li> </ul> <p>\u2190 Back to Examples</p>"},{"location":"examples/multi-provider/","title":"Multi-Provider Setup Example","text":"<p>This example demonstrates how to configure an agent with multiple AI providers for automatic failover and resilience.</p>"},{"location":"examples/multi-provider/#overview","title":"Overview","text":"<p>Multi-provider setup is essential for production applications where reliability is critical. The agent automatically switches between providers if one fails, ensuring uninterrupted service.</p> <p>Key benefits: - Automatic failover - Seamless switching on provider errors - Load distribution - Random selection among available providers - Cost optimization - Mix expensive and cheaper providers - Service diversity - Avoid single-point-of-failure</p>"},{"location":"examples/multi-provider/#complete-example","title":"Complete Example","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\nimport Anthropic from '@anthropic-ai/sdk';\nimport Groq from 'groq-sdk';\nimport type { Context } from '@arcaelas/agent';\nimport type { Provider } from '@arcaelas/agent';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// Initialize Anthropic client\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY\n});\n\n// Initialize Groq client\nconst groq = new Groq({\n  apiKey: process.env.GROQ_API_KEY\n});\n\n// Create OpenAI provider\nconst openai_provider: Provider = async (ctx: Context) =&gt; {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: ctx.messages.map(m =&gt; ({\n      role: m.role === 'tool' ? 'function' : m.role,\n      content: m.content\n    }))\n  });\n\n  return response;\n};\n\n// Create Anthropic provider\nconst anthropic_provider: Provider = async (ctx: Context) =&gt; {\n  // Convert to Claude format\n  const claude_messages = ctx.messages\n    .filter(m =&gt; m.role !== 'system')\n    .map(m =&gt; ({\n      role: m.role === 'assistant' ? 'assistant' : 'user',\n      content: m.content || ''\n    }));\n\n  const system_message = ctx.messages.find(m =&gt; m.role === 'system');\n\n  const response = await anthropic.messages.create({\n    model: \"claude-3-sonnet-20240229\",\n    max_tokens: 1024,\n    system: system_message?.content || '',\n    messages: claude_messages\n  });\n\n  // Convert back to ChatCompletion format\n  return {\n    id: response.id,\n    object: 'chat.completion' as const,\n    created: Math.floor(Date.now() / 1000),\n    model: response.model,\n    choices: [{\n      index: 0,\n      message: {\n        role: 'assistant' as const,\n        content: response.content[0].type === 'text'\n          ? response.content[0].text\n          : null\n      },\n      finish_reason: response.stop_reason === 'end_turn' ? 'stop' : null\n    }],\n    usage: {\n      prompt_tokens: response.usage.input_tokens,\n      completion_tokens: response.usage.output_tokens,\n      total_tokens: response.usage.input_tokens + response.usage.output_tokens\n    }\n  };\n};\n\n// Create Groq provider\nconst groq_provider: Provider = async (ctx: Context) =&gt; {\n  const response = await groq.chat.completions.create({\n    model: \"mixtral-8x7b-32768\",\n    messages: ctx.messages.map(m =&gt; ({\n      role: m.role === 'tool' ? 'function' : m.role,\n      content: m.content || ''\n    }))\n  });\n\n  return response;\n};\n\n// Create resilient agent with failover\nconst resilient_agent = new Agent({\n  name: \"Resilient_Assistant\",\n  description: \"High-availability AI assistant with automatic failover\",\n  providers: [\n    openai_provider,      // Primary (best quality)\n    anthropic_provider,   // Backup 1 (reliable alternative)\n    groq_provider         // Backup 2 (fast and free)\n  ]\n});\n\n// Usage example\nasync function chat_with_failover() {\n  const [messages, success] = await resilient_agent.call(\n    \"Explain the concept of async/await in JavaScript\"\n  );\n\n  if (success) {\n    const response = messages[messages.length - 1].content;\n    console.log(\"Response:\", response);\n  } else {\n    console.error(\"All providers failed\");\n  }\n}\n\nchat_with_failover();\n</code></pre>"},{"location":"examples/multi-provider/#failover-behavior","title":"Failover Behavior","text":"<p>The agent implements intelligent failover:</p> <ol> <li>Random Selection - Providers are selected randomly from available pool</li> <li>Automatic Retry - Failed providers are moved to fallback pool</li> <li>Continuous Attempt - Keeps trying until success or all fail</li> <li>State Preservation - Conversation history maintained across providers</li> </ol>"},{"location":"examples/multi-provider/#failover-flow","title":"Failover Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User Prompt \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Random Provider  \u2502\u25c4\u2500\u2500\u2510\n\u2502 Selection        \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n       \u2502               \u2502\n       \u25bc               \u2502\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n  \u2502 Success?\u2502\u2500\u2500No\u2500\u2500\u2510   \u2502\n  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518      \u2502   \u2502\n       \u2502Yes        \u2502   \u2502\n       \u25bc           \u25bc   \u2502\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502 Return  \u2502  \u2502 Move to     \u2502\n  \u2502 Response\u2502  \u2502 Fallback &amp;  \u2502\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502 Try Next    \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/multi-provider/#provider-strategy-patterns","title":"Provider Strategy Patterns","text":""},{"location":"examples/multi-provider/#pattern-1-quality-first","title":"Pattern 1: Quality-First","text":"<p>Prioritize quality, use cheaper options as backup:</p> <pre><code>const quality_first_agent = new Agent({\n  name: \"Premium_Agent\",\n  description: \"Prefers best quality responses\",\n  providers: [\n    gpt4_provider,           // Expensive but best\n    claude3_opus_provider,   // Also premium\n    gpt35_turbo_provider     // Cheaper fallback\n  ]\n});\n</code></pre>"},{"location":"examples/multi-provider/#pattern-2-speed-first","title":"Pattern 2: Speed-First","text":"<p>Prioritize fast responses:</p> <pre><code>const speed_first_agent = new Agent({\n  name: \"Fast_Agent\",\n  description: \"Optimized for quick responses\",\n  providers: [\n    groq_provider,           // Very fast\n    gpt35_turbo_provider,    // Also fast\n    gpt4_provider            // Slower fallback\n  ]\n});\n</code></pre>"},{"location":"examples/multi-provider/#pattern-3-cost-optimized","title":"Pattern 3: Cost-Optimized","text":"<p>Balance cost and quality:</p> <pre><code>const cost_optimized_agent = new Agent({\n  name: \"Budget_Agent\",\n  description: \"Cost-effective AI assistant\",\n  providers: [\n    groq_provider,           // Free\n    gpt35_turbo_provider,    // Cheap\n    claude_haiku_provider    // Also cheap\n  ]\n});\n</code></pre>"},{"location":"examples/multi-provider/#pattern-4-redundancy","title":"Pattern 4: Redundancy","text":"<p>Multiple instances of same provider for load distribution:</p> <pre><code>const redundant_agent = new Agent({\n  name: \"Redundant_Agent\",\n  description: \"High availability through redundancy\",\n  providers: [\n    openai_instance_1,\n    openai_instance_2,\n    openai_instance_3\n  ]\n});\n</code></pre>"},{"location":"examples/multi-provider/#environment-configuration","title":"Environment Configuration","text":"<p>Store API keys securely:</p> <pre><code># .env file\nOPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\nGROQ_API_KEY=gsk_...\n</code></pre> <p>Load with dotenv:</p> <pre><code>import 'dotenv/config';\n</code></pre>"},{"location":"examples/multi-provider/#error-handling","title":"Error Handling","text":"<p>Monitor provider failures:</p> <pre><code>const monitored_provider: Provider = async (ctx: Context) =&gt; {\n  const start = Date.now();\n\n  try {\n    const response = await openai.chat.completions.create({ ... });\n\n    // Log success metrics\n    console.log(`Provider succeeded in ${Date.now() - start}ms`);\n\n    return response;\n  } catch (error) {\n    // Log failure\n    console.error('Provider failed:', error.message);\n\n    // Re-throw to trigger failover\n    throw error;\n  }\n};\n</code></pre>"},{"location":"examples/multi-provider/#testing-failover","title":"Testing Failover","text":"<p>Simulate failures to test resilience:</p> <pre><code>// Create a failing provider\nconst failing_provider: Provider = async (ctx: Context) =&gt; {\n  throw new Error('Simulated failure');\n};\n\n// Test agent with simulated failure\nconst test_agent = new Agent({\n  name: \"Test_Agent\",\n  description: \"Testing failover behavior\",\n  providers: [\n    failing_provider,  // Always fails\n    openai_provider    // Should take over\n  ]\n});\n\nconst [messages, success] = await test_agent.call(\"Test message\");\nconsole.log(success); // true (failover worked)\n</code></pre>"},{"location":"examples/multi-provider/#best-practices","title":"Best Practices","text":"<ol> <li>Order Matters - Place preferred providers first</li> <li>Diverse Providers - Mix different AI services for better resilience</li> <li>Monitor Failures - Log which providers fail and why</li> <li>Rate Limits - Consider rate limits when using multiple instances</li> <li>Cost Tracking - Monitor token usage across providers</li> <li>Timeout Configuration - Set appropriate timeouts for each provider</li> </ol>"},{"location":"examples/multi-provider/#common-issues","title":"Common Issues","text":""},{"location":"examples/multi-provider/#issue-all-providers-fail","title":"Issue: All providers fail","text":"<pre><code>const [messages, success] = await agent.call(prompt);\n\nif (!success) {\n  // Check network connectivity\n  // Verify API keys\n  // Review error logs\n  console.error(\"All providers exhausted\");\n}\n</code></pre>"},{"location":"examples/multi-provider/#issue-slow-failover","title":"Issue: Slow failover","text":"<p>Add timeout to providers:</p> <pre><code>const timeout_provider: Provider = async (ctx: Context) =&gt; {\n  return Promise.race([\n    openai.chat.completions.create({ ... }),\n    new Promise((_, reject) =&gt;\n      setTimeout(() =&gt; reject(new Error('Timeout')), 5000)\n    )\n  ]);\n};\n</code></pre>"},{"location":"examples/multi-provider/#next-steps","title":"Next Steps","text":"<ul> <li>Custom Tools - Add tools to your agent</li> <li>Context Inheritance - Share configuration across agents</li> <li>Advanced Patterns - Complex multi-agent workflows</li> </ul> <p>\u2190 Back to Examples</p>"},{"location":"guides/best-practices/","title":"best-practices.md","text":"<p>Documentation coming soon. Check back later or contribute at GitHub.</p>"},{"location":"guides/core-concepts/","title":"Core Concepts","text":"<p>Understanding the core concepts of @arcaelas/agent will help you build sophisticated AI applications efficiently.</p>"},{"location":"guides/core-concepts/#architecture-overview","title":"Architecture Overview","text":"<p>@arcaelas/agent is built on four interconnected concepts:</p> <pre><code>graph TB\n    A[Agent] --&gt; B[Context]\n    B --&gt; C[Metadata]\n    B --&gt; D[Rules]\n    B --&gt; E[Tools]\n    B --&gt; F[Messages]\n    A --&gt; G[Providers]\n    style A fill:#5c6ac4\n    style B fill:#7c3aed</code></pre>"},{"location":"guides/core-concepts/#1-agent-the-orchestrator","title":"1. Agent - The Orchestrator","text":"<p>Agent is the central class that coordinates everything. It combines:</p> <ul> <li>Identity: Name and description</li> <li>Behavior: Rules and guidelines</li> <li>Capabilities: Tools and functions</li> <li>Intelligence: Provider functions</li> </ul> <pre><code>const agent = new Agent({\n  name: \"Customer_Support\",\n  description: \"Expert customer support specialist\",\n  tools: [search_tool, ticket_tool],\n  rules: [professional_rule],\n  providers: [openai_provider, claude_provider]\n});\n</code></pre> <p>Key Features:</p> <ul> <li>Automatic tool execution</li> <li>Provider failover</li> <li>Context inheritance</li> <li>Message history management</li> </ul> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#2-context-reactive-state-management","title":"2. Context - Reactive State Management","text":"<p>Context provides hierarchical state management with automatic inheritance. Think of it as a configuration layer that can be shared and extended.</p> <pre><code>// Parent context\nconst company_context = new Context({\n  metadata: new Metadata().set(\"org\", \"Acme Corp\"),\n  rules: [new Rule(\"Be professional\")]\n});\n\n// Child context inherits from parent\nconst sales_context = new Context({\n  context: company_context,  // Inherits everything\n  metadata: new Metadata().set(\"dept\", \"Sales\"),\n  tools: [crm_tool]\n});\n</code></pre> <p>Inheritance Rules:</p> <ul> <li>Metadata: Child can override parent values</li> <li>Rules: Child adds to parent rules</li> <li>Tools: Child tools override parent by name</li> <li>Messages: Combined from parent and child</li> </ul> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#3-metadata-key-value-store","title":"3. Metadata - Key-Value Store","text":"<p>Metadata is a reactive key-value store with inheritance. Perfect for configuration and state.</p> <pre><code>const parent = new Metadata()\n  .set(\"theme\", \"light\")\n  .set(\"lang\", \"en\");\n\nconst child = new Metadata(parent)\n  .set(\"theme\", \"dark\");  // Override\n\nconsole.log(child.get(\"theme\"));  // \"dark\" (overridden)\nconsole.log(child.get(\"lang\"));   // \"en\" (inherited)\n</code></pre> <p>Use Cases:</p> <ul> <li>Application configuration</li> <li>User preferences</li> <li>Feature flags</li> <li>Session data</li> </ul> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#4-tools-function-execution","title":"4. Tools - Function Execution","text":"<p>Tools encapsulate functions that agents can execute. They can be simple or complex.</p> <p>Simple Tool: <pre><code>const time_tool = new Tool(\"get_time\", async () =&gt; {\n  return new Date().toLocaleString();\n});\n</code></pre></p> <p>Advanced Tool: <pre><code>const search_tool = new Tool(\"search_database\", {\n  description: \"Search customer database\",\n  parameters: {\n    query: \"Search query string\",\n    limit: \"Maximum results (default: 10)\"\n  },\n  func: async (params) =&gt; {\n    const results = await database.search(params.query, params.limit || 10);\n    return JSON.stringify(results);\n  }\n});\n</code></pre></p> <p>Key Features:</p> <ul> <li>Automatic parameter validation</li> <li>Async execution support</li> <li>Error handling</li> <li>Reusable across agents</li> </ul> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#5-rules-behavioral-guidelines","title":"5. Rules - Behavioral Guidelines","text":"<p>Rules define how agents should behave. They can be static or conditional.</p> <p>Static Rule: <pre><code>const professional_rule = new Rule(\n  \"Always maintain a professional and courteous tone\"\n);\n</code></pre></p> <p>Conditional Rule: <pre><code>const business_hours_rule = new Rule(\n  \"Inform about office hours availability\",\n  {\n    when: (agent) =&gt; {\n      const hour = new Date().getHours();\n      return hour &lt; 9 || hour &gt; 17;\n    }\n  }\n);\n</code></pre></p> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#6-messages-conversation-history","title":"6. Messages - Conversation History","text":"<p>Messages represent individual messages in a conversation. Types include:</p> <ul> <li><code>user</code> - Messages from the user</li> <li><code>assistant</code> - Responses from the agent</li> <li><code>tool</code> - Results from tool execution</li> <li><code>system</code> - System-level instructions</li> </ul> <pre><code>const user_msg = new Message({\n  role: \"user\",\n  content: \"What's the weather?\"\n});\n\nconst tool_msg = new Message({\n  role: \"tool\",\n  tool_id: \"weather_123\",\n  content: \"Sunny, 22\u00b0C\"\n});\n</code></pre> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#7-providers-ai-integration","title":"7. Providers - AI Integration","text":"<p>Providers are functions that integrate with AI services. They receive context and return completions.</p> <pre><code>const openai_provider = async (ctx) =&gt; {\n  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n  return await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: ctx.messages.map(m =&gt; ({\n      role: m.role,\n      content: m.content\n    })),\n    tools: ctx.tools?.map(tool =&gt; ({\n      type: \"function\",\n      function: {\n        name: tool.name,\n        description: tool.description,\n        parameters: { type: \"object\", properties: tool.parameters }\n      }\n    }))\n  });\n};\n</code></pre> <p>Multi-Provider Failover:</p> <pre><code>const agent = new Agent({\n  name: \"Resilient_Agent\",\n  description: \"High-availability agent\",\n  providers: [\n    openai_provider,    // Primary\n    claude_provider,    // Backup 1\n    groq_provider       // Backup 2\n  ]\n});\n</code></pre> <p>If the primary fails, the agent automatically tries backup providers in order.</p> <p>Learn more \u2192</p>"},{"location":"guides/core-concepts/#data-flow","title":"Data Flow","text":"<p>Understanding how data flows through the system:</p> <ol> <li>User Input \u2192 Agent receives prompt</li> <li>Context Building \u2192 Agent prepares context with messages, tools, rules</li> <li>Provider Call \u2192 Provider receives context, returns completion</li> <li>Tool Execution \u2192 If completion includes tool calls, execute them</li> <li>Loop \u2192 Repeat steps 3-4 until completion or failure</li> <li>Response \u2192 Return final messages and success status</li> </ol> <pre><code>const [messages, success] = await agent.call(\"Hello\");\n//     ^^^^^^^^  ^^^^^^^\n//     Full conversation history\n//                Success indicator\n</code></pre>"},{"location":"guides/core-concepts/#reactive-architecture","title":"Reactive Architecture","text":"<p>The reactive architecture means changes propagate automatically:</p> <pre><code>const parent_context = new Context({\n  metadata: new Metadata().set(\"version\", \"1.0\")\n});\n\nconst child_context = new Context({\n  context: parent_context\n});\n\n// Child automatically sees parent's metadata\nconsole.log(child_context.metadata.get(\"version\"));  // \"1.0\"\n\n// Changes in parent don't affect existing child references\n// But new children get updated values\nparent_context.metadata.set(\"version\", \"2.0\");\n</code></pre>"},{"location":"guides/core-concepts/#best-practices","title":"Best Practices","text":""},{"location":"guides/core-concepts/#1-context-organization","title":"1. Context Organization","text":"<p>Organize contexts by scope:</p> <pre><code>// Global company context\nconst company_ctx = new Context({ ... });\n\n// Department contexts\nconst sales_ctx = new Context({ context: company_ctx, ... });\nconst support_ctx = new Context({ context: company_ctx, ... });\n\n// Team contexts\nconst sales_team_a = new Context({ context: sales_ctx, ... });\n</code></pre>"},{"location":"guides/core-concepts/#2-tool-design","title":"2. Tool Design","text":"<p>Keep tools focused and reusable:</p> <pre><code>// \u2705 Good: Focused, single responsibility\nconst get_weather = new Tool(\"get_weather\", { ... });\nconst get_forecast = new Tool(\"get_forecast\", { ... });\n\n// \u274c Bad: Too broad\nconst weather_everything = new Tool(\"weather\", { ... });\n</code></pre>"},{"location":"guides/core-concepts/#3-provider-strategy","title":"3. Provider Strategy","text":"<p>Always have fallback providers:</p> <pre><code>providers: [\n  primary_provider,      // Fast, preferred\n  backup_provider,       // Reliable fallback\n  emergency_provider     // Last resort\n]\n</code></pre>"},{"location":"guides/core-concepts/#4-error-handling","title":"4. Error Handling","text":"<p>Handle errors gracefully:</p> <pre><code>const [messages, success] = await agent.call(prompt);\n\nif (!success) {\n  // Log error\n  console.error(\"Agent failed to respond\");\n\n  // Retry or fallback\n  await retry_mechanism();\n}\n</code></pre>"},{"location":"guides/core-concepts/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/core-concepts/#pattern-specialized-agents","title":"Pattern: Specialized Agents","text":"<p>Create specialized agents for different tasks:</p> <pre><code>const search_agent = new Agent({\n  name: \"Search_Agent\",\n  description: \"Expert in searching and finding information\",\n  tools: [web_search, doc_search, db_search]\n});\n\nconst writer_agent = new Agent({\n  name: \"Writer_Agent\",\n  description: \"Expert in writing and content creation\",\n  tools: [grammar_check, style_check, plagiarism_check]\n});\n</code></pre>"},{"location":"guides/core-concepts/#pattern-agent-chaining","title":"Pattern: Agent Chaining","text":"<p>Chain agents for complex workflows:</p> <pre><code>async function complex_task(input) {\n  // Step 1: Research\n  const [research, success1] = await research_agent.call(input);\n\n  // Step 2: Analysis\n  const analysis_input = research[research.length - 1].content;\n  const [analysis, success2] = await analysis_agent.call(analysis_input);\n\n  // Step 3: Report\n  const report_input = analysis[analysis.length - 1].content;\n  const [report, success3] = await writer_agent.call(report_input);\n\n  return report;\n}\n</code></pre>"},{"location":"guides/core-concepts/#pattern-context-composition","title":"Pattern: Context Composition","text":"<p>Compose contexts for flexibility:</p> <pre><code>const auth_context = new Context({ ... });\nconst logging_context = new Context({ ... });\nconst analytics_context = new Context({ ... });\n\nconst agent = new Agent({\n  contexts: [auth_context, logging_context, analytics_context],\n  ...\n});\n</code></pre>"},{"location":"guides/core-concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Providers Guide - Advanced provider configuration</li> <li>Best Practices - Production patterns</li> <li>API Reference - Complete API documentation</li> <li>Examples - Practical implementations</li> </ul>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>This guide will walk you through creating your first AI agent with @arcaelas/agent, from installation to deployment.</p>"},{"location":"guides/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js \u2265 16.0.0 installed</li> <li>An OpenAI API key (get one at platform.openai.com)</li> <li>Basic knowledge of TypeScript or JavaScript</li> </ul>"},{"location":"guides/getting-started/#step-1-installation","title":"Step 1: Installation","text":"<p>Install @arcaelas/agent and required dependencies:</p> <pre><code>npm install @arcaelas/agent openai dotenv\n</code></pre>"},{"location":"guides/getting-started/#step-2-environment-setup","title":"Step 2: Environment Setup","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>OPENAI_API_KEY=sk-your-actual-api-key-here\n</code></pre>"},{"location":"guides/getting-started/#step-3-your-first-agent","title":"Step 3: Your First Agent","text":"<p>Create a file <code>my-first-agent.ts</code>:</p> <pre><code>import 'dotenv/config';\nimport { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  baseURL: \"https://api.openai.com/v1\",\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// Create the agent\nconst assistant = new Agent({\n  name: \"Personal_Assistant\",\n  description: \"A helpful assistant that answers questions and provides information\",\n  providers: [\n    async (ctx) =&gt; {\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        }))\n      });\n    }\n  ]\n});\n\n// Start conversation\nasync function main() {\n  const [messages, success] = await assistant.call(\"Hello! Can you introduce yourself?\");\n\n  if (success) {\n    console.log(\"Assistant:\", messages[messages.length - 1].content);\n  } else {\n    console.log(\"Failed to get response\");\n  }\n}\n\nmain();\n</code></pre> <p>Run your agent:</p> <pre><code>npx tsx my-first-agent.ts\n</code></pre> <p>Expected Output: <pre><code>Assistant: Hello! I'm your Personal Assistant, here to help answer questions and provide information. How can I assist you today?\n</code></pre></p>"},{"location":"guides/getting-started/#step-4-adding-tools","title":"Step 4: Adding Tools","text":"<p>Tools allow your agent to perform actions. Let's add a time tool:</p> <pre><code>import { Agent, Tool } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\n// Create a simple time tool\nconst time_tool = new Tool(\"get_current_time\", async () =&gt; {\n  return new Date().toLocaleString();\n});\n\n// Create agent with the tool\nconst assistant = new Agent({\n  name: \"Time_Assistant\",\n  description: \"Assistant that can tell the current time\",\n  tools: [time_tool],\n  providers: [\n    async (ctx) =&gt; {\n      const openai = new OpenAI({\n        baseURL: \"https://api.openai.com/v1\",\n        apiKey: process.env.OPENAI_API_KEY\n      });\n\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        })),\n        // Pass tools to the model\n        tools: ctx.tools?.map(tool =&gt; ({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: {\n              type: \"object\",\n              properties: tool.parameters\n            }\n          }\n        }))\n      });\n    }\n  ]\n});\n\n// Ask for the time\nconst [messages, success] = await assistant.call(\"What time is it?\");\n</code></pre> <p>The agent will: 1. Receive your question 2. Decide to use the <code>get_current_time</code> tool 3. Execute the tool automatically 4. Respond with the current time</p>"},{"location":"guides/getting-started/#step-5-adding-rules","title":"Step 5: Adding Rules","text":"<p>Rules define how your agent should behave:</p> <pre><code>import { Agent, Rule } from '@arcaelas/agent';\n\nconst assistant = new Agent({\n  name: \"Professional_Assistant\",\n  description: \"Professional customer support agent\",\n  rules: [\n    new Rule(\"Always maintain a professional and courteous tone\"),\n    new Rule(\"Never share confidential information\"),\n    new Rule(\"If unsure, admit it rather than making up information\")\n  ],\n  providers: [openai_provider]\n});\n</code></pre>"},{"location":"guides/getting-started/#step-6-multi-provider-setup","title":"Step 6: Multi-Provider Setup","text":"<p>Add automatic failover between providers:</p> <pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\nimport Anthropic from '@anthropic-ai/sdk';\n\nconst resilient_agent = new Agent({\n  name: \"Resilient_Agent\",\n  description: \"High-availability assistant\",\n  providers: [\n    // Primary: OpenAI\n    async (ctx) =&gt; {\n      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({ role: m.role, content: m.content }))\n      });\n    },\n\n    // Backup: Anthropic Claude\n    async (ctx) =&gt; {\n      const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });\n      const response = await anthropic.messages.create({\n        model: \"claude-3-sonnet-20240229\",\n        max_tokens: 4000,\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role === \"system\" ? \"user\" : m.role,\n          content: m.content\n        }))\n      });\n\n      // Convert to OpenAI format\n      return {\n        id: response.id,\n        object: \"chat.completion\",\n        created: Math.floor(Date.now() / 1000),\n        model: \"claude-3-sonnet\",\n        choices: [{\n          index: 0,\n          message: {\n            role: \"assistant\",\n            content: response.content[0].text\n          },\n          finish_reason: \"stop\"\n        }]\n      };\n    }\n  ]\n});\n</code></pre> <p>If OpenAI fails, the agent automatically tries Claude.</p>"},{"location":"guides/getting-started/#step-7-context-inheritance","title":"Step 7: Context Inheritance","text":"<p>Create reusable contexts for organizational structure:</p> <pre><code>import { Agent, Context, Metadata, Rule } from '@arcaelas/agent';\n\n// Company-wide base context\nconst company_context = new Context({\n  metadata: new Metadata()\n    .set(\"organization\", \"Acme Corp\")\n    .set(\"compliance\", \"enterprise\"),\n  rules: [\n    new Rule(\"Maintain professional communication\"),\n    new Rule(\"Protect confidential information\")\n  ]\n});\n\n// Department-specific context\nconst support_context = new Context({\n  context: company_context,  // Inherits from company\n  metadata: new Metadata().set(\"department\", \"Support\"),\n  tools: [kb_search_tool, ticket_tool]\n});\n\n// Create agent with inherited context\nconst support_agent = new Agent({\n  name: \"Support_Agent\",\n  description: \"Customer support specialist\",\n  contexts: support_context,  // Has access to everything\n  providers: [openai_provider]\n});\n\n// Agent automatically has:\n// - Company metadata (\"organization\", \"compliance\")\n// - Department metadata (\"department\")\n// - Company rules + department rules\n// - Department tools\n</code></pre>"},{"location":"guides/getting-started/#complete-example","title":"Complete Example","text":"<p>Here's a complete, production-ready example:</p> <pre><code>import 'dotenv/config';\nimport { Agent, Tool, Rule, Metadata } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\n// Create utility tools\nconst weather_tool = new Tool(\"get_weather\", {\n  description: \"Get current weather for a city\",\n  parameters: {\n    city: \"City name (e.g., 'London', 'New York')\"\n  },\n  func: async (params) =&gt; {\n    // In production, call a real weather API\n    return `Weather in ${params.city}: Sunny, 22\u00b0C`;\n  }\n});\n\nconst time_tool = new Tool(\"get_time\", async () =&gt; {\n  return new Date().toLocaleString();\n});\n\n// Create the agent\nconst assistant = new Agent({\n  name: \"Smart_Assistant\",\n  description: \"Intelligent assistant with weather and time capabilities\",\n\n  metadata: new Metadata()\n    .set(\"version\", \"1.0\")\n    .set(\"environment\", \"production\"),\n\n  tools: [weather_tool, time_tool],\n\n  rules: [\n    new Rule(\"Be concise and helpful\"),\n    new Rule(\"Use tools when appropriate\"),\n    new Rule(\"Admit when you don't know something\")\n  ],\n\n  providers: [\n    async (ctx) =&gt; {\n      const openai = new OpenAI({\n        baseURL: \"https://api.openai.com/v1\",\n        apiKey: process.env.OPENAI_API_KEY\n      });\n\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        })),\n        tools: ctx.tools?.map(tool =&gt; ({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: {\n              type: \"object\",\n              properties: tool.parameters\n            }\n          }\n        }))\n      });\n    }\n  ]\n});\n\n// Interactive conversation loop\nasync function startChat() {\n  const readline = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  console.log(\"Chat started! Type 'exit' to quit.\\n\");\n\n  const prompt = () =&gt; {\n    readline.question('You: ', async (input: string) =&gt; {\n      if (input.toLowerCase() === 'exit') {\n        readline.close();\n        return;\n      }\n\n      const [messages, success] = await assistant.call(input);\n\n      if (success) {\n        const response = messages[messages.length - 1].content;\n        console.log(`Assistant: ${response}\\n`);\n      } else {\n        console.log(\"Failed to get response. Try again.\\n\");\n      }\n\n      prompt();\n    });\n  };\n\n  prompt();\n}\n\nstartChat();\n</code></pre>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first agent, explore these topics:</p> <ul> <li>Core Concepts - Deep dive into architecture</li> <li>Providers - Advanced provider configuration</li> <li>API Reference - Complete API documentation</li> <li>Examples - More practical examples</li> </ul>"},{"location":"guides/getting-started/#common-issues","title":"Common Issues","text":""},{"location":"guides/getting-started/#provider-errors","title":"Provider Errors","text":"<p>If you see connection errors:</p> <ol> <li>Check your API key is correct</li> <li>Verify internet connection</li> <li>Check API provider status</li> </ol>"},{"location":"guides/getting-started/#tool-execution-failures","title":"Tool Execution Failures","text":"<p>If tools aren't working:</p> <ol> <li>Ensure tools are passed to the provider</li> <li>Check tool function returns a string</li> <li>Verify parameters match expected format</li> </ol>"},{"location":"guides/getting-started/#typescript-errors","title":"TypeScript Errors","text":"<p>If TypeScript shows errors:</p> <ol> <li>Install types: <code>npm install --save-dev @types/node</code></li> <li>Update <code>tsconfig.json</code> target to ES2020+</li> <li>Enable <code>esModuleInterop</code> in tsconfig</li> </ol>"},{"location":"guides/getting-started/#support","title":"Support","text":"<p>Need help? Check these resources:</p> <ul> <li>API Reference</li> <li>GitHub Issues</li> <li>Discord Community</li> </ul>"},{"location":"guides/providers/","title":"Providers","text":"<p>Documentation for setting up and configuring AI providers is coming soon.</p> <p>For now, see the Getting Started Guide for basic provider examples.</p>"},{"location":"guides/providers/#multi-provider-example","title":"Multi-Provider Example","text":"<pre><code>const agent = new Agent({\n  name: \"Resilient_Agent\",\n  description: \"Agent with automatic failover\",\n  providers: [\n    openai_provider,    // Primary\n    claude_provider,    // Backup\n    groq_provider       // Fallback\n  ]\n});\n</code></pre> <p>More comprehensive documentation coming soon.</p>"},{"location":"es/","title":"Documentaci\u00f3n de Arcaelas Agent","text":"<p>Bienvenido a @arcaelas/agent - una librer\u00eda TypeScript lista para producci\u00f3n para construir agentes de IA sofisticados con soporte multi-proveedor, contextos reactivos y orquestaci\u00f3n inteligente de herramientas.</p>"},{"location":"es/#que-es-arcaelas-agent","title":"\u00bfQu\u00e9 es Arcaelas Agent?","text":"<p>@arcaelas/agent te permite crear agentes de IA que escalan desde chatbots simples hasta flujos de trabajo organizacionales complejos mediante:</p> <ul> <li>\ud83d\udd04 Soporte Multi-Proveedor - Conmutaci\u00f3n autom\u00e1tica entre OpenAI, Anthropic, Groq y APIs personalizadas</li> <li>\ud83c\udfd7\ufe0f Arquitectura Reactiva - Herencia jer\u00e1rquica de contexto con gesti\u00f3n autom\u00e1tica de estado</li> <li>\ud83d\udee0\ufe0f Ecosistema de Herramientas - Herramientas HTTP integradas e integraci\u00f3n fluida de funciones personalizadas</li> <li>\ud83d\udc8e TypeScript Completo - Seguridad de tipos completa con uniones discriminadas y gen\u00e9ricos</li> </ul>"},{"location":"es/#inicio-rapido","title":"Inicio R\u00e1pido","text":""},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>npm install @arcaelas/agent\n</code></pre>"},{"location":"es/#tu-primer-agente","title":"Tu Primer Agente","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\nconst assistant = new Agent({\n  name: \"Asistente_Personal\",\n  description: \"Asistente \u00fatil para tareas diarias\",\n  providers: [\n    async (ctx) =&gt; {\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        }))\n      });\n    }\n  ]\n});\n\nconst [messages, success] = await assistant.call(\"\u00bfC\u00f3mo est\u00e1 el clima hoy?\");\n</code></pre> <p>Continuar con el tutorial completo \u2192</p>"},{"location":"es/#arquitectura-principal","title":"Arquitectura Principal","text":""},{"location":"es/#agente","title":"Agente","text":"<p>Orquestador central que combina identidad, comportamiento, herramientas y proveedores de IA.</p> <pre><code>const agent = new Agent({\n  name: \"Agente_Soporte\",\n  description: \"Especialista en soporte al cliente\",\n  tools: [search_tool, database_tool],\n  rules: [professional_rule],\n  providers: [openai_provider]\n});\n</code></pre> <p>Aprende m\u00e1s \u2192</p>"},{"location":"es/#contexto","title":"Contexto","text":"<p>Gesti\u00f3n jer\u00e1rquica de estado con herencia autom\u00e1tica.</p> <pre><code>const parent_context = new Context({\n  metadata: new Metadata().set(\"company\", \"Acme Corp\"),\n  rules: [new Rule(\"Mantener tono profesional\")]\n});\n\nconst child_context = new Context({\n  context: parent_context,  // Hereda del padre\n  metadata: new Metadata().set(\"department\", \"Ventas\")\n});\n</code></pre> <p>Aprende m\u00e1s \u2192</p>"},{"location":"es/#herramientas","title":"Herramientas","text":"<p>Funciones extensibles para integraciones externas.</p> <pre><code>const weather_tool = new Tool(\"get_weather\", {\n  description: \"Obtener clima actual para cualquier ciudad\",\n  parameters: {\n    city: \"Nombre de la ciudad\",\n    units: \"Unidades de temperatura (celsius/fahrenheit)\"\n  },\n  func: async ({ city, units }) =&gt; {\n    return `Clima en ${city}: Soleado, 24\u00b0C`;\n  }\n});\n</code></pre> <p>Aprende m\u00e1s \u2192</p>"},{"location":"es/#documentacion","title":"Documentaci\u00f3n","text":""},{"location":"es/#guias","title":"\ud83d\udcda Gu\u00edas","text":"<ul> <li>Comenzando - Tutorial completo</li> <li>Conceptos B\u00e1sicos - Visi\u00f3n general de la arquitectura</li> <li>Proveedores - Configuraci\u00f3n multi-proveedor</li> <li>Mejores Pr\u00e1cticas - Patrones de producci\u00f3n</li> </ul>"},{"location":"es/#referencia-api","title":"\ud83d\udd27 Referencia API","text":"<ul> <li>Agent - Orquestador principal</li> <li>Context - Gesti\u00f3n de estado</li> <li>Metadata - Almac\u00e9n clave-valor</li> <li>Tool - Funciones personalizadas</li> <li>Rule - Directrices de comportamiento</li> <li>Message - Mensajes de conversaci\u00f3n</li> <li>Providers - Funciones de proveedor</li> <li>Built-in Tools - RemoteTool y TimeTool</li> </ul>"},{"location":"es/#ejemplos","title":"\ud83d\udca1 Ejemplos","text":"<ul> <li>Basic Agent - Chatbot simple</li> <li>Multi-Provider - Configuraci\u00f3n resiliente</li> <li>Custom Tools - Creando herramientas</li> <li>Context Inheritance - Patrones empresariales</li> <li>Advanced Patterns - Escenarios complejos</li> </ul>"},{"location":"es/#avanzado","title":"\ud83c\udf93 Avanzado","text":"<ul> <li>Architecture - Dise\u00f1o interno</li> <li>Performance - Optimizaci\u00f3n</li> <li>Troubleshooting - Problemas comunes</li> <li>Migration Guide - Actualizaci\u00f3n de versiones</li> </ul>"},{"location":"es/#requisitos","title":"Requisitos","text":"<ul> <li>Node.js \u2265 16.0.0</li> <li>TypeScript \u2265 4.5.0 (opcional)</li> </ul>"},{"location":"es/#enlaces","title":"Enlaces","text":"<ul> <li>Repositorio GitHub</li> <li>Paquete NPM</li> <li>Rastreador de Problemas</li> <li>Comunidad Discord</li> </ul> <p>\u00bfListo para construir agentes de IA inteligentes? Comienza con la Gu\u00eda de Inicio \u2192</p>"},{"location":"de/","title":"Arcaelas Agent Dokumentation","text":"<p>Willkommen zu @arcaelas/agent - einer produktionsreifen TypeScript-Bibliothek zum Erstellen anspruchsvoller KI-Agenten mit Multi-Anbieter-Unterst\u00fctzung, reaktiven Kontexten und intelligenter Werkzeug-Orchestrierung.</p>"},{"location":"de/#was-ist-arcaelas-agent","title":"Was ist Arcaelas Agent?","text":"<p>@arcaelas/agent erm\u00f6glicht es Ihnen, KI-Agenten zu erstellen, die von einfachen Chatbots bis zu komplexen Unternehmens-Workflows skalieren durch:</p> <ul> <li>\ud83d\udd04 Multi-Anbieter-Unterst\u00fctzung - Automatische Ausfallsicherung zwischen OpenAI, Anthropic, Groq und benutzerdefinierten APIs</li> <li>\ud83c\udfd7\ufe0f Reaktive Architektur - Hierarchische Kontextvererbung mit automatischer Zustandsverwaltung</li> <li>\ud83d\udee0\ufe0f Werkzeug-\u00d6kosystem - Integrierte HTTP-Werkzeuge und nahtlose Integration benutzerdefinierter Funktionen</li> <li>\ud83d\udc8e Vollst\u00e4ndiges TypeScript - Vollst\u00e4ndige Typsicherheit mit diskriminierten Unions und Generics</li> </ul>"},{"location":"de/#schnellstart","title":"Schnellstart","text":""},{"location":"de/#ihr-erster-agent","title":"Ihr erster Agent","text":"<pre><code>import { Agent } from '@arcaelas/agent';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\nconst assistant = new Agent({\n  name: \"Pers\u00f6nlicher_Assistent\",\n  description: \"Hilfreicher Assistent f\u00fcr t\u00e4gliche Aufgaben\",\n  providers: [\n    async (ctx) =&gt; {\n      return await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: ctx.messages.map(m =&gt; ({\n          role: m.role,\n          content: m.content\n        }))\n      });\n    }\n  ]\n});\n\nconst [messages, success] = await assistant.call(\"Wie ist das Wetter heute?\");\n</code></pre> <p>Mit dem vollst\u00e4ndigen Tutorial fortfahren \u2192</p>"},{"location":"de/#hauptarchitektur","title":"Hauptarchitektur","text":""},{"location":"de/#agent","title":"Agent","text":"<p>Zentraler Orchestrator, der Identit\u00e4t, Verhalten, Werkzeuge und KI-Anbieter kombiniert.</p> <pre><code>const agent = new Agent({\n  name: \"Support_Agent\",\n  description: \"Kundensupport-Spezialist\",\n  tools: [search_tool, database_tool],\n  rules: [professional_rule],\n  providers: [openai_provider]\n});\n</code></pre> <p>Mehr erfahren \u2192</p>"},{"location":"de/#kontext","title":"Kontext","text":"<p>Hierarchische Zustandsverwaltung mit automatischer Vererbung.</p> <pre><code>const parent_context = new Context({\n  metadata: new Metadata().set(\"company\", \"Acme Corp\"),\n  rules: [new Rule(\"Professionellen Ton beibehalten\")]\n});\n\nconst child_context = new Context({\n  context: parent_context,  // Erbt vom Eltern\n  metadata: new Metadata().set(\"department\", \"Vertrieb\")\n});\n</code></pre> <p>Mehr erfahren \u2192</p>"},{"location":"de/#werkzeuge","title":"Werkzeuge","text":"<p>Erweiterbare Funktionen f\u00fcr externe Integrationen.</p> <pre><code>const weather_tool = new Tool(\"get_weather\", {\n  description: \"Aktuelles Wetter f\u00fcr jede Stadt abrufen\",\n  parameters: {\n    city: \"Stadtname\",\n    units: \"Temperatureinheiten (celsius/fahrenheit)\"\n  },\n  func: async ({ city, units }) =&gt; {\n    return `Wetter in ${city}: Sonnig, 24\u00b0C`;\n  }\n});\n</code></pre> <p>Mehr erfahren \u2192</p>"},{"location":"de/#dokumentation","title":"Dokumentation","text":""},{"location":"de/#anleitungen","title":"\ud83d\udcda Anleitungen","text":"<ul> <li>Erste Schritte - Vollst\u00e4ndiges Tutorial</li> <li>Kernkonzepte - Architektur\u00fcbersicht</li> <li>Anbieter - Multi-Anbieter-Konfiguration</li> <li>Best Practices - Produktionsmuster</li> </ul>"},{"location":"de/#api-referenz","title":"\ud83d\udd27 API-Referenz","text":"<ul> <li>Agent - Hauptorchestrator</li> <li>Context - Zustandsverwaltung</li> <li>Metadata - Schl\u00fcssel-Wert-Speicher</li> <li>Tool - Benutzerdefinierte Funktionen</li> <li>Rule - Verhaltensrichtlinien</li> <li>Message - Konversationsnachrichten</li> <li>Providers - Anbieter-Funktionen</li> <li>Built-in Tools - RemoteTool &amp; TimeTool</li> </ul>"},{"location":"de/#beispiele","title":"\ud83d\udca1 Beispiele","text":"<ul> <li>Basic Agent - Einfacher Chatbot</li> <li>Multi-Provider - Widerstandsf\u00e4hige Konfiguration</li> <li>Custom Tools - Werkzeuge erstellen</li> <li>Context Inheritance - Unternehmensmuster</li> <li>Advanced Patterns - Komplexe Szenarien</li> </ul>"},{"location":"de/#erweitert","title":"\ud83c\udf93 Erweitert","text":"<ul> <li>Architecture - Internes Design</li> <li>Performance - Optimierung</li> <li>Troubleshooting - H\u00e4ufige Probleme</li> <li>Migration Guide - Versions-Upgrades</li> </ul>"},{"location":"de/#anforderungen","title":"Anforderungen","text":"<ul> <li>Node.js \u2265 16.0.0</li> <li>TypeScript \u2265 4.5.0 (optional)</li> </ul>"},{"location":"de/#links","title":"Links","text":"<ul> <li>GitHub-Repository</li> <li>NPM-Paket</li> <li>Issue-Tracker</li> <li>Discord-Community</li> </ul> <p>Bereit, intelligente KI-Agenten zu erstellen? Beginnen Sie mit dem Erste-Schritte-Leitfaden \u2192</p>"}]}